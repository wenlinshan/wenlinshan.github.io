<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SQL优化万能公式：5 大步骤 + 10 个案例</title>
    <url>/2022/08/16/SQL%E4%BC%98%E5%8C%96%E4%B8%87%E8%83%BD%E5%85%AC%E5%BC%8F%EF%BC%9A5%20%E5%A4%A7%E6%AD%A5%E9%AA%A4%20+%2010%20%E4%B8%AA%E6%A1%88%E4%BE%8B-sql-you-hua-wan-neng-gong-shi-5da-bu-zhou-10ge-an-li/</url>
    <content><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>在应用开发的早期，数据量少，开发人员开发功能时更重视功能上的实现，随着生产数据的增长，很多SQL语句开始暴露出性能问题，对生产的影响也越来越大，有时可能这些有问题的SQL就是整个系统性能的瓶颈。</p>
<h2 id="2、SQL优化一般步骤"><a href="#2、SQL优化一般步骤" class="headerlink" title="2、SQL优化一般步骤"></a>2、SQL优化一般步骤</h2><p><strong>1、通过慢查日志等定位那些执行效率较低的SQL语句</strong></p>
<p><strong>2、explain 分析SQL的执行计划</strong></p>
<p>需要重点关注type、rows、filtered、extra。</p>
<p>type由上至下，效率越来越高</p>
<ul>
<li>ALL 全表扫描</li>
<li>index 索引全扫描</li>
<li>range 索引范围扫描，常用语&lt;,&lt;&#x3D;,&gt;&#x3D;,between,in等操作</li>
<li>ref 使用非唯一索引扫描或唯一索引前缀扫描，返回单条记录，常出现在关联查询中</li>
<li>eq_ref 类似ref，区别在于使用的是唯一索引，使用主键的关联查询</li>
<li>const&#x2F;system 单条记录，系统会把匹配行中的其他列作为常数处理，如主键或唯一索引查询</li>
<li>null MySQL不访问任何表或索引，直接返回结果</li>
<li>虽然上至下，效率越来越高，但是根据cost模型，假设有两个索引idx1(a, b, c),idx2(a, c)，SQL为”select * from t where a &#x3D; 1 and b in (1, 2) order by c”;如果走idx1，那么是type为range，如果走idx2，那么type是ref；当需要扫描的行数，使用idx2大约是idx1的5倍以上时，会用idx1，否则会用idx2</li>
</ul>
<p>Extra</p>
<ul>
<li>Using filesort：MySQL需要额外的一次传递，以找出如何按排序顺序检索行。通过根据联接类型浏览所有行并为所有匹配WHERE子句的行保存排序关键字和行的指针来完成排序。然后关键字被排序，并按排序顺序检索行。</li>
<li>Using temporary：使用了临时表保存中间结果，性能特别差，需要重点优化</li>
<li>Using index：表示相应的 select 操作中使用了覆盖索引（Coveing Index）,避免访问了表的数据行，效率不错！如果同时出现 using where，意味着无法直接通过索引查找来查询到符合条件的数据。</li>
<li>Using index condition：MySQL5.6之后新增的ICP，using index condtion就是使用了ICP（索引下推），在存储引擎层进行数据过滤，而不是在服务层过滤，利用索引现有的数据减少回表的数据。</li>
</ul>
<p><strong>3、show profile 分析</strong></p>
<p>了解SQL执行的线程的状态及消耗的时间。</p>
<p>默认是关闭的，开启语句“set profiling &#x3D; 1;”</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> PROFILES ;<span class="keyword">SHOW</span> PROFILE <span class="keyword">FOR</span> QUERY  #&#123;id&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>4、trace</strong></p>
<p>trace分析优化器如何选择执行计划，通过trace文件能够进一步了解为什么优惠券选择A执行计划而不选择B执行计划。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> optimizer_trace<span class="operator">=</span>&quot;enabled=on&quot;;<span class="keyword">set</span> optimizer_trace_max_mem_size<span class="operator">=</span><span class="number">1000000</span>;<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace;</span><br></pre></td></tr></table></figure>



<p><strong>5、确定问题并采用相应的措施</strong></p>
<ul>
<li>优化索引</li>
<li>优化SQL语句：修改SQL、IN 查询分段、时间查询分段、基于上一次数据过滤</li>
<li>改用其他实现方式：ES、数仓等</li>
<li>数据碎片处理</li>
</ul>
<h2 id="3、场景分析"><a href="#3、场景分析" class="headerlink" title="3、场景分析"></a>3、场景分析</h2><p><strong>案例1、最左匹配</strong></p>
<p>索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">KEY `idx_shopid_orderno` (`shop_id`,`order_no`)</span><br></pre></td></tr></table></figure>



<p>SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> _t <span class="keyword">where</span> orderno<span class="operator">=</span><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>



<p>查询匹配从左往右匹配，要使用order_no走索引，必须查询条件携带shop_id或者索引(shop_id,order_no)调换前后顺序</p>
<p><strong>案例2、隐式转换</strong></p>
<p>索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">KEY `idx_mobile` (`mobile`)</span><br></pre></td></tr></table></figure>



<p>SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> _user <span class="keyword">where</span> mobile<span class="operator">=</span><span class="number">12345678901</span></span><br></pre></td></tr></table></figure>



<p>隐式转换相当于在索引上做运算，会让索引失效。mobile是字符类型，使用了数字，应该使用字符串匹配，否则MySQL会用到隐式替换，导致索引失效。</p>
<p><strong>案例3、大分页</strong></p>
<p>索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">KEY `idx_a_b_c` (`a`, `b`, `c`)</span><br></pre></td></tr></table></figure>



<p>SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> _t <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="operator">=</span> <span class="number">2</span> <span class="keyword">order</span> <span class="keyword">by</span> c <span class="keyword">desc</span> limit <span class="number">10000</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure>



<p>对于大分页的场景，可以优先让产品优化需求，如果没有优化的，有如下两种优化方式，</p>
<p>一种是把上一次的最后一条数据，也即上面的c传过来，然后做“c &lt; xxx”处理，但是这种一般需要改接口协议，并不一定可行。</p>
<p>另一种是采用延迟关联的方式进行处理，减少SQL回表，但是要记得索引需要完全覆盖才有效果，SQL改动如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select t1.* from _t t1, (select id from _t where a = 1 and b = 2 order by c desc limit 10000, 10) t2 where t1.id = t2.id;</span><br></pre></td></tr></table></figure>



<p><strong>案例4、in + order by</strong></p>
<p>索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">KEY `idx_shopid_status_created` (`shop_id`, `order_status`, `created_at`)</span><br></pre></td></tr></table></figure>



<p>SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> _order <span class="keyword">where</span> shop_id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> order_status <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="keyword">order</span> <span class="keyword">by</span> created_at <span class="keyword">desc</span> limit <span class="number">10</span></span><br></pre></td></tr></table></figure>



<p>in查询在MySQL底层是通过n*m的方式去搜索，类似union，但是效率比union高。</p>
<p>in查询在进行cost代价计算时（代价 &#x3D; 元组数 * IO平均值），是通过将in包含的数值，一条条去查询获取元组数的，因此这个计算过程会比较的慢，所以MySQL设置了个临界值(eq_range_index_dive_limit)，5.6之后超过这个临界值后该列的cost就不参与计算了。因此会导致执行计划选择不准确。默认是200，即in条件超过了200个数据，会导致in的代价计算存在问题，可能会导致Mysql选择的索引不准确。</p>
<p>处理方式，可以(order_status, created_at)互换前后顺序，并且调整SQL为延迟关联。</p>
<p><strong>案例5、范围查询阻断，后续字段不能走索引</strong></p>
<p>索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">KEY `idx_shopid_created_status` (`shop_id`, `created_at`, `order_status`)</span><br></pre></td></tr></table></figure>



<p>SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> _order <span class="keyword">where</span> shop_id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> created_at <span class="operator">&gt;</span> <span class="string">&#x27;2021-01-01 00:00:00&#x27;</span> <span class="keyword">and</span> order_status <span class="operator">=</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>



<p>范围查询还有“IN、between”</p>
<p><strong>案例6、不等于、不包含不能用到索引的快速搜索。（可以用到ICP）</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> _order <span class="keyword">where</span> shop_id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> order_status <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>)<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> _order <span class="keyword">where</span> shop_id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> order_status <span class="operator">!=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>



<p>在索引上，避免使用NOT、!&#x3D;、&lt;&gt;、!&lt;、!&gt;、NOT EXISTS、NOT IN、NOT LIKE等</p>
<p><strong>案例7、优化器选择不使用索引的情况</strong></p>
<p>如果要求访问的数据量很小，则优化器还是会选择辅助索引，但是当访问的数据占整个表中数据的蛮大一部分时（一般是20%左右），优化器会选择通过聚集索引来查找数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> _order <span class="keyword">where</span>  order_status <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>



<p>查询出所有未支付的订单，一般这种订单是很少的，即使建了索引，也没法使用索引。</p>
<p><strong>案例8、复杂查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(amt) <span class="keyword">from</span> _t <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="keyword">and</span> c <span class="operator">&gt;</span> <span class="string">&#x27;2020-01-01&#x27;</span>;<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> _t <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="keyword">and</span> c <span class="operator">&gt;</span> <span class="string">&#x27;2020-01-01&#x27;</span> limit <span class="number">10</span>;</span><br></pre></td></tr></table></figure>



<p>如果是统计某些数据，可能改用数仓进行解决；</p>
<p>如果是业务上就有那么复杂的查询，可能就不建议继续走SQL了，而是采用其他的方式进行解决，比如使用ES等进行解决。</p>
<p><strong>案例9、asc和desc混用</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> _t <span class="keyword">where</span> a<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> b <span class="keyword">desc</span>, c <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>



<p>desc 和asc混用时会导致索引失效</p>
<p><strong>案例10、大数据</strong></p>
<p>对于推送业务的数据存储，可能数据量会很大，如果在方案的选择上，最终选择存储在MySQL上，并且做7天等有效期的保存。</p>
<p>那么需要注意，频繁的清理数据，会照成数据碎片，需要联系DBA进行数据碎片处理</p>
<p>来源：cnblogs.com&#x2F;powercto&#x2F;p&#x2F;14410128.html</p>
]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
  </entry>
  <entry>
    <title>Bean注入的四种方式</title>
    <url>/2022/12/01/Bean%E6%B3%A8%E5%85%A5%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F-bean%E6%B3%A8%E5%85%A5%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Bean注入的四种方式"><a href="#Bean注入的四种方式" class="headerlink" title="Bean注入的四种方式"></a>Bean注入的四种方式</h1><h2 id="xml-方式"><a href="#xml-方式" class="headerlink" title="xml 方式"></a>xml 方式</h2><p>依稀记得最早接触<code>Spring</code>的时候，用的还是<code>SSH</code>框架，不知道大家对这个还有印象吗？所有的<code>bean</code>的注入得依靠<code>xml</code>文件来完成。</p>
<p>它的注入方式分为：<code>set</code>方法注入、构造方法注入、字段注入，而注入类型分为值类型注入（8种基本数据类型）和引用类型注入（将依赖对象注入）。</p>
<p>以下是<code>set</code>方法注入的简单样例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.vipwen.domain.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;vipwen&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应的实体类代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>xml方式存在的缺点如下：</strong></p>
<ol>
<li><code>xml</code>文件配置起来比较麻烦，既要维护代码又要维护配置文件，开发效率低；</li>
<li>项目中配置文件过多，维护起来比较困难；</li>
<li>程序编译期间无法对配置项的正确性进行验证，只能在运行期发现并且出错之后不易排查；</li>
<li>解析<code>xml</code>时，无论是将<code>xml</code>一次性装进内存，还是一行一行解析，都会占用内存资源，影响性能。</li>
</ol>
<h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2><p>随着<code>Spring</code>的发展，<code>Spring 2.5</code>开始出现了一系列注解，除了我们经常使用的@Controller、@Service、@Repository、@Component 之外，还有一些比较常用的方式，接下来我们简单了解下。</p>
<h3 id="Configuration-Bean"><a href="#Configuration-Bean" class="headerlink" title="@Configuration + @Bean"></a>@Configuration + @Bean</h3><p>当我们需要引入第三方的<code>jar</code>包时，可以用<code>@Bean</code>注解来标注，同时需要搭配<code>@Configuration</code>来使用。</p>
<ul>
<li><code>@Configuration</code>用来声明一个配置类，可以理解为<code>xml</code>的&#96;&#96;标签</li>
<li><code>@Bean</code> 用来声明一个<code>bean</code>，将其加入到<code>Spring</code>容器中，可以理解为<code>xml</code>的&#96;&#96;标签</li>
</ul>
<p><strong>简单样例：将 RedisTemplate 注入 Spring</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(LettuceConnectionFactory lettuceConnectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(lettuceConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// key</span></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">// 指定要序列化的域(field,get,set)，访问修饰符(public,private,protected)</span></span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="comment">//value</span></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><p>我们在翻看<code>Spring</code>源码的过程中，经常会看到<code>@Import</code>注解，它也可以用来将第三方<code>jar</code>包注入<code>Spring</code>，但是它只可以作用在<strong>类</strong>上。</p>
<p>例如在注解<code>EnableSpringConfigured</code>上就包含了<code>@Import</code>注解，用于将<code>SpringConfiguredConfiguration</code>配置文件加载进<code>Spring</code>容器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(SpringConfiguredConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableSpringConfigured &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>@Import</code>的<code>value</code>值是一个数组，一个一个注入比较繁琐，因此我们可以搭配<code>ImportSelector</code>接口来使用，用法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(MySelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;org.springframework.data.redis.core.RedisTemplate&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>selectImports</code>方法返回的数组就会通过<code>@Import</code>注解注入到<code>Spring</code>容器中。</p>
<p>无独有偶，<code>ImportBeanDefinitionRegistrar</code>接口也为我们提供了注入<code>bean</code>的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(AspectJAutoProxyRegistrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAspectJAutoProxy &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们点击<code>AspectJAutoProxyRegistrar</code>类，发现它实现了<code>ImportBeanDefinitionRegistrar</code>接口，它的<code>registerBeanDefinitions</code>方法便是注入<code>bean</code>的过程，可以参考下。</p>
<p>如果觉得源代码比较难懂，可以看一下我们自定义的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(value = &#123;MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span><br><span class="line"><span class="params">                                        BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">            <span class="type">RootBeanDefinition</span> <span class="variable">tDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(Teacher.class);</span><br><span class="line">            <span class="comment">// 注册 Bean，并指定bean的名称和类型</span></span><br><span class="line">            registry.registerBeanDefinition(<span class="string">&quot;teacher&quot;</span>, tDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样我们就把<code>Teacher</code>类注入到<code>Spring</code>容器中了。</p>
<h2 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h2><p>提到<code>FactoryBean</code>，就不得不与<code>BeanFactory</code>比较一番。</p>
<ul>
<li><code>BeanFactory</code> : 是 <code>Factory</code>， <code>IOC</code>容器或者对象工厂，所有的<code>Bean</code>都由它进行管理</li>
<li><code>FactoryBean</code> : 是<code>Bean</code> ，是一个能产生或者修饰对象生成的工厂 <code>Bean</code>，实现与工厂模式和修饰器模式类似</li>
</ul>
<p>那么<code>FactoryBean</code>是如何实现<code>bean</code>注入的呢？</p>
<p>先定义实现了<code>FactoryBean</code>接口的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Teacher&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回此工厂管理的对象实例</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Teacher <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回此 FactoryBean 创建的对象的类型</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Teacher.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后通过 @Configuration + @Bean的方式将<code>TeacherFactoryBean</code>加入到容器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TeacherFactoryBean <span class="title function_">teacherFactoryBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TeacherFactoryBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：我们没有向容器中注入<code>Teacher</code>, 而是直接注入的<code>TeacherFactoryBean</code>，然后从容器中拿<code>Teacher</code>这个类型的<code>bean</code>，成功运行。</p>
<h2 id="BDRegistryPostProcessor"><a href="#BDRegistryPostProcessor" class="headerlink" title="BDRegistryPostProcessor"></a>BDRegistryPostProcessor</h2><p>看到这个接口，不知道对于翻看过<code>Spring</code>源码的你来说熟不熟悉。如果不熟悉的话请往下看，要是熟悉的话就再看一遍吧😃。</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> <span class="keyword">extends</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">    <span class="comment">// 注册bean到spring容器中</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>BeanFactoryPostProcessor</code>接口是<code>BeanFactory</code>的后置处理器，方法<code>postProcessBeanFactory</code>对<code>bean</code>的定义进行控制。今天我们重点来看看<code>postProcessBeanDefinitionRegistry</code>方法：它的参数是<code>BeanDefinitionRegistry</code>，顾名思义就是与<code>BeanDefinition</code>注册相关的。</p>
<p><img src="/2022/12/01/Bean%E6%B3%A8%E5%85%A5%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F-bean%E6%B3%A8%E5%85%A5%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/0_jpg-43676f4ff0144f669b179cba83a80b61.jpg" alt="0_jpg"></p>
<p>通过观察该类，我们发现它里边包含了<code>registerBeanDefinition</code>方法，这个不就是我们想要的吗？为了能更好的使用该接口来达到注入<code>bean</code>的目的，我们先来看看<code>Spring</code>是如何操作此接口的。</p>
<p><img src="/2022/12/01/Bean%E6%B3%A8%E5%85%A5%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F-bean%E6%B3%A8%E5%85%A5%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/1_jpg-2bc8a40570474895a3ada3f73ac531d4.jpg"></p>
<p>看下<code>invokeBeanFactoryPostProcessors</code>方法，会发现没有实现<code>PriorityOrdered</code>和<code>Ordered</code>的<code>bean</code>（这种跟我们自定义的实现类有关）会执行以下代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (reiterate) &#123;</span><br><span class="line">    ......</span><br><span class="line">    invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入该方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">invokeBeanDefinitionRegistryPostProcessors</span><span class="params">(</span></span><br><span class="line"><span class="params">    Collection&lt;? extends BeanDefinitionRegistryPostProcessor&gt; postProcessors, </span></span><br><span class="line"><span class="params">    BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionRegistryPostProcessor postProcessor : postProcessors) &#123;</span><br><span class="line">        postProcessor.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会发现实现了<code>BeanDefinitionRegistryPostProcessor</code>接口的<code>bean</code>，其<code>postProcessBeanDefinitionRegistry</code>方法会被调用，也就是说如果我们自定义接口实现该接口，它的<code>postProcessBeanDefinitionRegistry</code>方法也会被执行。</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>话不多说，直接上代码。自定义接口实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanDefinitionRegistryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化过程中先执行</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">rootBeanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(Teacher.class);</span><br><span class="line">        <span class="comment">//Teacher 的定义注册到spring容器中</span></span><br><span class="line">        registry.registerBeanDefinition(<span class="string">&quot;teacher&quot;</span>, rootBeanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化过程中后执行</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动类代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">    <span class="type">MyBeanDefinitionRegistryPostProcessor</span> <span class="variable">postProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBeanDefinitionRegistryPostProcessor</span>();</span><br><span class="line">    <span class="comment">//将自定义实现类加入 Spring 容器</span></span><br><span class="line">    context.addBeanFactoryPostProcessor(postProcessor);</span><br><span class="line">    context.refresh();</span><br><span class="line">    <span class="type">Teacher</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(Teacher.class);</span><br><span class="line">    System.out.println(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动并打印结果</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">org.springframework.demo.model.Teacher@2473d930</span><br></pre></td></tr></table></figure>

<p>发现已经注入到<code>Spring</code>容器中了。</p>
]]></content>
  </entry>
  <entry>
    <title>hashmap底层数据结构</title>
    <url>/2021/08/18/hashmap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-hashmap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="一、HashMap简介"><a href="#一、HashMap简介" class="headerlink" title="一、HashMap简介"></a>一、HashMap简介</h2><p>1、它是一个通过Map接口实现的一个双列集合，主要是以键值对的方式进行存储，每一个键值对都有一个键和一个值。</p>
<p>2、每一个键都是唯一的，值可以重复，后面添加的键会覆盖前面相同的键。</p>
<p>3、HashMap存储结构采用的是哈希表的结构，元素的存储顺序不能保存一致，如果键是自定义的对象的话，需要重写hashcode方法与equals方法，才能保证键的唯一。</p>
<h2 id="二、HashMap存储的原理"><a href="#二、HashMap存储的原理" class="headerlink" title="二、HashMap存储的原理"></a>二、HashMap存储的原理</h2><h3 id="1、版本区别"><a href="#1、版本区别" class="headerlink" title="1、版本区别"></a>1、版本区别</h3><p><strong>jdk8以前：</strong></p>
<p>在jdk1.7中，首先是把元素放在一个个数组里面，后来存放的数据元素越来越多，于是就出现了链表，对于数组中的每一个元素，都可以有一条链表来存储元素。这就是有名的“拉链式”存储方法。<br><img src="/2021/08/18/hashmap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-hashmap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-840e869c0ea34c8cad5655d3d316d8e4.png" alt="image.png"></p>
<p><strong>jdk8以后：</strong></p>
<p>由于存储的元素越来越多，链表也越来越长，在查找一个元素时候效率不仅没有提高（链表不适合查找，适合增删），反倒是下降了不少，于是就对这条链表进行了一个改进。如何改进呢？就是把这条链表变成一个适合查找的树形结构，没错就是红黑树。值得注意的是，因为需要为了退化成链表和遍历做准备，这个红黑树并不是纯红黑树，而是红黑树和双向链表的叠加结构。</p>
<p><img src="/2021/08/18/hashmap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-hashmap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-ab9163a96dc44373910d0ef343bc8db6.png" alt="image.png"></p>
<h3 id="2、存储的流程"><a href="#2、存储的流程" class="headerlink" title="2、存储的流程"></a>2、存储的流程</h3><p><img src="/2021/08/18/hashmap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-hashmap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-e3c1b70070d14acf9a3d26733f1a2de3.png" alt="image.png"></p>
<h3 id><a href="#" class="headerlink" title></a></h3><h2 id="三、HashMap数据结构"><a href="#三、HashMap数据结构" class="headerlink" title="三、HashMap数据结构"></a>三、HashMap数据结构</h2><h3 id="1、hash表数据结构"><a href="#1、hash表数据结构" class="headerlink" title="1、hash表数据结构"></a>1、hash表数据结构</h3><h4 id="1）简介"><a href="#1）简介" class="headerlink" title="1）简介"></a>1）简介</h4><p>哈希表是一个通过数组和链表相结合而成的数据结构，既避免了数组的增删慢，也避免了链表查询查询慢的的缺陷。</p>
<p><strong>数组</strong> ：</p>
<p>数组的存储区是连续的，占用内存严重，故空间复杂度很大。但数组的二分查找时间度小；数组的特点：寻址容易，插入和删除困难。</p>
<p><strong>链表</strong> ：</p>
<p>链表的储存区离散，占用内存比较宽松，故空间复杂度很小，但时间复杂度大；</p>
<p>链表的特点：寻址困难，插入和删除容易。</p>
<h4 id="2）保证数据唯一的原理"><a href="#2）保证数据唯一的原理" class="headerlink" title="2）保证数据唯一的原理"></a>2）保证数据唯一的原理</h4><ol>
<li><p>当HashMap集合存储元素的时候,就会调用该元素的hashCode0方法计算哈希值</p>
</li>
<li><p>判断该哈希值对应的位置上是否有相同哈希值的元素</p>
</li>
<li><p>如果该位置上没有相同哈希值的元素,就直接存储</p>
</li>
<li><p>如果该位置上有相同哈希值的元素,就说明产生了哈希冲突</p>
</li>
<li><p>产生了哈希冲实,就得调用该元素的equals方法,与该哈希值位置上的所有元素进行-比较</p>
</li>
<li><p>如果比较完后,没有一个元素与该元素相同,就直接存储</p>
</li>
<li><p>如果比较完后,只要有任意一个元素与该元素相同,就不存储</p>
</li>
</ol>
<p><img src="/2021/08/18/hashmap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-hashmap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-5e50cc4ebbdf4cd59e62ef6f41491a37.png" alt="image.png"></p>
<h3 id="3、红黑树的数据结构"><a href="#3、红黑树的数据结构" class="headerlink" title="3、红黑树的数据结构"></a>3、红黑树的数据结构</h3><h4 id="1）简介-1"><a href="#1）简介-1" class="headerlink" title="1）简介"></a>1）简介</h4><p>红黑树是一种自平衡的二叉查找树，是计算机科学中用到的一种数据结构，它是在1972年由Rudolf Bayer发明的，当时被称之为平衡二叉B树，后来，在1978年被Leoj.Guibas和Robert Sedgewick修改为如今的”红黑树”。它是一种特殊的二叉查找树，红黑树的每一个节点上都有存储位表示节点的颜色，可以是红或者黑；</p>
<p>红黑树不是高度平衡的，它的平衡是通过”红黑树的特性”进行实现的；</p>
<h4 id="2）红黑树特性"><a href="#2）红黑树特性" class="headerlink" title="2）红黑树特性"></a>2）红黑树特性</h4><ol>
<li><p>每一个节点或是红色的，或者是黑色的。</p>
</li>
<li><p>根节点必须是黑色</p>
</li>
<li><p>每个叶节点(Nil)是黑色的；（如果一个节点没有子节点或者父节点，则该节点相应的指针属性值为Nil，这些Nil视为叶节点）</p>
</li>
<li><p>如果某一个节点是红色，那么它的子节点必须是黑色(不能出现两个红色节点相连的情况)</p>
</li>
<li><p>对每一个节点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点；</p>
</li>
<li><p>在进行元素插入的时候，和之前一样； 每一次插入完毕以后，使用黑色规则进行校验，如果不满足红黑规则，就需要通过变色，左旋和右旋来调整树，使其满足红黑规则；</p>
</li>
</ol>
<p><img src="/2021/08/18/hashmap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-hashmap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-4bf5d88b307548c7bb2a52a715858cad.png" alt="image.png"></p>
<h4 id="3）与AVL树的区别"><a href="#3）与AVL树的区别" class="headerlink" title="3）与AVL树的区别"></a>3）与AVL树的区别</h4><p> 1、红黑树放弃了追求完全平衡，追求大致平衡，在与平衡二叉树的时间复杂度相差不大的情况下，保证每次插入最多只需要三次旋转就能达到平衡，实现起来也更为简单。</p>
<p> 2、平衡二叉树追求绝对平衡，条件比较苛刻，实现起来比较麻烦，每次插入新节点之后需要旋转的次数不能预知。</p>
<h2 id="四、算法"><a href="#四、算法" class="headerlink" title="四、算法"></a>四、算法</h2><h4 id="1、负载因子（load-factor）"><a href="#1、负载因子（load-factor）" class="headerlink" title="1、负载因子（load factor）"></a>1、负载因子（load factor）</h4><p>   如果一个hash表中桶的个数为 size , 存储的元素个数为used .则我们称 used &#x2F; size 为负载因子loadFactor . 一般的情况下，当loadFactor&lt;&#x3D;1时，hash表查找的期望复杂度为O(1). 因此。每次往hash表中加入元素时。我们必须保证是在loadFactor &lt;1的情况下，才可以加入。</p>
<h4 id="2、初始容量与扩容"><a href="#2、初始容量与扩容" class="headerlink" title="2、初始容量与扩容"></a>2、初始容量与扩容</h4><p>HashMap的初始容量为16，Hashtable初始容量为11，两者的负载填充因子默认都是0.75。</p>
<p>如果size大小到达阈值，则扩容一倍，依旧为2的整次幂</p>
<p>最大容量：因为计算采用int值，int值最大为2的31次-1，达不到2的31次，所以为2的30次。</p>
<h4 id="3、扩容的实现"><a href="#3、扩容的实现" class="headerlink" title="3、扩容的实现"></a>3、扩容的实现</h4><p>当我们加入一个新元素时。一旦loadFactor大于等于1了，我们不能单纯的往hash表里边加入元素。</p>
<p>由于加入完之后，loadFactor将大于1，这样也就不能保证查找的期望时间复杂度为常数级了。这时。我们应该对桶数组进行一次容量扩张，让size增大 。</p>
<p>这样就能保证加入元素后 used &#x2F; size 仍然小于等于1 ， 从而保证查找的期望时间复杂度为O(1).可是。怎样进行容量扩张呢？ C++中的vector的容量扩张是一种好方法。</p>
<p>于是有了例如以下思路 ：　Hash表中每次发现loadFactor&#x3D;&#x3D;1时，就开辟一个原来桶数组的两倍空间（称为新桶数组），然后把原来的桶数组中元素所有转移过来到新的桶数组中。注意这里转移是须要元素一个个又一次哈希到新桶中的。原因后面会讲到。</p>
<p>   这样的方法的缺点是，容量扩张是一次完毕的，期间要花非常长时间一次转移hash表中的全部元素。这样在hash表中loadFactor&#x3D;&#x3D;1时。往里边插入一个元素将会等候非常长的时间。</p>
<h4 id="4、Redis中的实现"><a href="#4、Redis中的实现" class="headerlink" title="4、Redis中的实现"></a>4、Redis中的实现</h4><ol>
<li><p>Redis 是一个高效的 key-value 缓存系统，也可以理解为基于键值对的数据库。</p>
</li>
<li><p>Redis也是采取<strong>链地址法</strong>解决哈希冲突。</p>
</li>
<li><p>我们知道，Java发生扩容的瞬间，是需要先将原哈希表中所有键值对都转移到新的哈希表中，这个过程是比较慢的，此时插入该元素的性能相当低。</p>
</li>
<li><p>而Redis对于这一部分，采取的是<strong>分摊转移</strong>的方式。即当插入一个新元素x触发了扩容时，先转移第一个不为空的桶到新的哈希表，然后将该元素插入。而下一次再次插入时，继续转移旧哈希表中第一个不为空的桶，再插入元素。直至旧哈希表为空为止。这样一来，理想情况下，插入的时间复杂度是O(1)。</p>
</li>
<li><p>在Redis的实现中，新插入的键值对会放在箱子中链表的头部，而不是在尾部继续插入。</p>
</li>
<li><p>这种方案是基于两点考虑：</p>
</li>
<li><p>一是由于找到链表尾部的时间复杂度为O(n)，且需要额外的内存地址来保存链表的尾部位置，而头插法的时间复杂度为O(1)。</p>
</li>
<li><p>二是处于Redis的实际应用场景来考虑。对于一个数据库系统来说，最新插入的数据往往更可能频繁地被获取，所以这样也能节省查找的耗时</p>
</li>
</ol>
<h2 id="五、ConcurrentHashMap、HashTable、HashMap区别"><a href="#五、ConcurrentHashMap、HashTable、HashMap区别" class="headerlink" title="五、ConcurrentHashMap、HashTable、HashMap区别"></a>五、ConcurrentHashMap、HashTable、HashMap区别</h2><h3 id="1、HashMap"><a href="#1、HashMap" class="headerlink" title="1、HashMap"></a>1、HashMap</h3><p>因为多线程环境下，使用Hashmap进行put操作可能会引起死锁，导致CPU利用率接近100%，所以在并发情况下不能使用HashMap。【PS：HashMap 是允许key值为空的】</p>
<h3 id="2、HashTable"><a href="#2、HashTable" class="headerlink" title="2、HashTable"></a>2、HashTable</h3><p>Hashtable容器使用synchronized来保证线程安全，但在线程竞争激烈的情况下Hashtable的效率非常低下。因为当一个线程访问Hashtable的同步方法时，其他线程访问Hashtable的同步方法时，可能会进入阻塞或轮询状态。如线程1使用put进行添加元素，线程2不但不能使用put方法添加元素，并且也不能使用get方法来获取元素，所以竞争越激烈效率越低。</p>
<p><img src="/2021/08/18/hashmap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-hashmap%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-ba4fef5ef17740c79a373e929b5db03f.png" alt="image.png"></p>
<h3 id="3、ConcurrentHashMap"><a href="#3、ConcurrentHashMap" class="headerlink" title="3、ConcurrentHashMap"></a>3、ConcurrentHashMap</h3><p><strong>1）jdk7版本</strong></p>
<p>ConcurrentHashMap和HashMap设计思路差不多，但是为支持并发操作，做了一定的改进，ConcurrentHashMap引入Segment 的概念，目的是将map拆分成多个Segment(默认16个)。操作ConcurrentHashMap细化到操作某一个Segment。在多线程环境下，不同线程操作不同的Segment，他们互不影响，这便可实现并发操作。</p>
<p><strong>2）jdk8版本</strong></p>
<p>jdk8版本的ConcurrentHashMap相对于jdk7版本，发送了很大改动，jdk8直接抛弃了Segment的设计，采用了  较为轻捷的Node + CAS + Synchronized设计，保证线程安全。</p>
<p><strong>3）总结</strong></p>
<p>1、get方法不加锁；</p>
<p>2、put、remove方法要使用锁</p>
<p>jdk7使用锁分离机制(Segment分段加锁)</p>
<p>jdk8使用cas + synchronized 实现锁操作</p>
<p>3、Iterator对象的使用，运行一边更新，一遍遍历(可以根据原理自己拓展)</p>
<p>4、复合操作，无法保证线程安全，需要额外加锁保证</p>
<p>5、并发环境下，ConcurrentHashMap 效率较Collections.synchronizedMap()更高</p>
]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
  </entry>
  <entry>
    <title>fastdfs应用</title>
    <url>/2021/07/22/fastdfs%E5%BA%94%E7%94%A8-fastdfs%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<ul>
<li><h3 id="从应用层面详解fastdfs各组件"><a href="#从应用层面详解fastdfs各组件" class="headerlink" title="从应用层面详解fastdfs各组件"></a>从应用层面详解fastdfs各组件</h3></li>
<li><h3 id="fastdfs的多服务器场景使用及部署配置说明"><a href="#fastdfs的多服务器场景使用及部署配置说明" class="headerlink" title="fastdfs的多服务器场景使用及部署配置说明"></a>fastdfs的多服务器场景使用及部署配置说明</h3></li>
</ul>
<h2 id><a href="#" class="headerlink" title></a></h2><h2 id="相关的文章"><a href="#相关的文章" class="headerlink" title="相关的文章"></a>相关的文章</h2><p>1、单体安装教程 <a href="https://blog.csdn.net/suoyanming/article/details/88797360">https://blog.csdn.net/suoyanming/article/details/88797360</a></p>
<p>2、开源中国fastdfs主页 <a href="https://www.oschina.net/p/fastdfs">p&#x2F;fastdfs</a></p>
<p>3、github主页（不确定是否是原作者维护） <a href="https://github.com/happyfish100/fastdfs">happyfish100&#x2F;fastdfs</a></p>
<p>4、对fastdfs-nginx-module 实现原理讲的非常清楚 <strong><a href="https://www.cnblogs.com/littleatp/p/4361318.html">https://www.cnblogs.com/littleatp/p/4361318.html</a></strong>   </p>
<h1 id="一、FastDFS"><a href="#一、FastDFS" class="headerlink" title="一、FastDFS"></a><strong>一、FastDFS</strong></h1><p>1、FastDFS是一个开源的轻量级<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/1250388">分布式文件系统</a>，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p>
<p>2、FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<h1 id="二、深入认识FastDFS"><a href="#二、深入认识FastDFS" class="headerlink" title="二、深入认识FastDFS"></a><strong>二、深入认识FastDFS</strong></h1><ul>
<li>任何一个中间件的应用，都必须深入了解该中间件内部各组件的承担的功能角色、运行机制，能深入了解各组件的实现原理更好。这样才能灵活应对实际应用场景、多变的业务需求、生产环境应急等问题，快速实施架构调整。</li>
<li>我们一直在使用FastDFS作为图片文件数据库，部署架构为单体（即：一个tracker、一个storage、一个group）,由于本次用于部署fastdfs的服务器硬盘空间报警，当务之急必须更改fastdfs部署架构，扩展存储。</li>
<li>下面从项目总体情况、tracker 、storage、fastdfs-nginx-module 、group 组件详细说明其功能角色及运行机制</li>
</ul>
<h2 id="1、项目总体情况"><a href="#1、项目总体情况" class="headerlink" title="1、项目总体情况"></a><strong>1、项目总体情况</strong></h2><ul>
<li>​    fastdfs是开源的项目</li>
<li>​    通过github源码可看出，该项目是基于C语言开发的</li>
<li>​    fastdfs是基于操作系统OS的文件管理系统功能之上进行分布式文件管理（Linux、FreeBSD等），通过看文件在硬盘的保存方式也可以得出</li>
<li>​    提供C、Java和PHP API接口</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190325165732189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1b3lhbm1pbmc=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/20190325165748158.png" alt="img"></p>
<h2 id="2、tracker跟踪器"><a href="#2、tracker跟踪器" class="headerlink" title="2、tracker跟踪器"></a><strong>2、tracker跟踪器</strong></h2><ul>
<li><p><strong>主要做调度工作， 起负载均衡的作用</strong></p>
</li>
<li><p><strong>在内存中记录集群中所有存储组group和存储服务器storage 的状态信息, 是客户端和数据服务器交互的枢纽</strong></p>
</li>
<li><p><strong>tracker的核心工作内容</strong>：</p>
</li>
</ul>
<p>（1） 记录集群中有多少个group（group1\group2….）</p>
<p>(2) 每个group 分布在那个几个storage上，以及storage所在机器的ip，端口等信息，group之间的同步由tracker 和storage一起完成（后面细讲）</p>
<p>（3）如果同一个group 存在多个storage, 而这些storage又被分布在一台或多台机器上，那么对该group上传或读取文件具体落到那个机器上（即那个storage）？（有点绕）</p>
<p>tracker完美的解决了这个问题，即对分布式部署架构下：多group、多storage的上传和下载做负载均衡策略，通过配置tracker.conf可实现具体负载均衡策略</p>
<p>(4) tracker 可部署多台，多个tracker在服务器内存中记录的信息是一样的，通过nginx对tracker做负载均衡，以提高并发性能及容灾能力</p>
<p>（5）tracker 不去主动读取storage的相关信息，而是由storage主动推送给tracker （<strong>这也是为什么必须先启动tracker的原因</strong>） </p>
<p>（6）以下图片摘自网上 ： 上传文件过程 、下载文件过程，通过图片可以看到，tracker的核心工作是为客户端找到一个storage, client客户端和storage进行上传下载通信。</p>
<p><img src="https://img-blog.csdnimg.cn/201903251658268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1b3lhbm1pbmc=,size_16,color_FFFFFF,t_70" alt="img"></p>
<ul>
<li><h6 id="tracker-conf-在分布式部署架构下，通过tracker负载均衡给client端返回特定storage信息，而负载均衡的策略配置主要在tracker-conf中"><a href="#tracker-conf-在分布式部署架构下，通过tracker负载均衡给client端返回特定storage信息，而负载均衡的策略配置主要在tracker-conf中" class="headerlink" title="tracker.conf (在分布式部署架构下，通过tracker负载均衡给client端返回特定storage信息，而负载均衡的策略配置主要在tracker.conf中)"></a><strong>tracker.conf (在分布式部署架构下，通过tracker负载均衡给client端返回特定storage信息，而负载均衡的策略配置主要在tracker.conf中)</strong></h6><h2 id="核心参数配置说明"><a href="#核心参数配置说明" class="headerlink" title="核心参数配置说明"></a>核心参数配置说明</h2></li>
</ul>
<h3 id="（1）disabled-x3D-false"><a href="#（1）disabled-x3D-false" class="headerlink" title="（1）disabled&#x3D;false"></a>（1）disabled&#x3D;false</h3><p>​     <strong>#配置文件是否失效</strong></p>
<p>​     # is this config file disabled</p>
<p>​    # false for enabled</p>
<p>​    # true for disabled disabled&#x3D;false</p>
<p>​    # is this config file disabled # false for enabled # true for disabled</p>
<h3 id="（2）port-x3D-22122"><a href="#（2）port-x3D-22122" class="headerlink" title="（2）port&#x3D;22122"></a>（2）port&#x3D;22122</h3><p>​      #服务端口</p>
<p>​      # the tracker server port</p>
<h3 id="（3）-base-path-x3D-x2F-data-x2F-fastdfs-x2F-tracker"><a href="#（3）-base-path-x3D-x2F-data-x2F-fastdfs-x2F-tracker" class="headerlink" title="（3） base_path&#x3D;&#x2F;data&#x2F;fastdfs&#x2F;tracker"></a><strong>（3） base_path&#x3D;&#x2F;data&#x2F;fastdfs&#x2F;tracker</strong></h3><p>​       # 存放track 数据及日志文件目录 </p>
<p>​       # the base path to store data and log files</p>
<p>​		work_threads&#x3D;4</p>
<p>​     #时线程数：一般和cpu的个数设为同一个值     </p>
<p>​     # work thread count, should &lt;&#x3D; max_connections</p>
<p>​     # default value is 4</p>
<p>​      # since V2.00</p>
<h3 id="（4）（重要）-store-lookup-x3D-1"><a href="#（4）（重要）-store-lookup-x3D-1" class="headerlink" title="（4）（重要） store_lookup&#x3D;1"></a><strong>（4）（重要） store_lookup&#x3D;1</strong></h3><p><strong>上传文件选择哪个一个group 的 策略：0：轮询；1:指定组 ； 2： 负载均衡，选择剩余存储空间最大的组group 上传文件</strong></p>
<p>​       # the method of selecting group to upload files</p>
<p>​       # 0: round robin</p>
<p>​       # 1: specify group</p>
<p>​      # 2: load balance, select the max free space group to <strong>upload file</strong></p>
<h3 id="（5）（重要）-store-group-x3D-group2"><a href="#（5）（重要）-store-group-x3D-group2" class="headerlink" title="（5）（重要） store_group&#x3D;group2"></a><strong>（5）（重要） store_group&#x3D;group2</strong></h3><p>​    # 当 store_lookup&#x3D;1 时，该配置有效，指定存储的组名</p>
<p>​     # which group to upload file</p>
<p>​     # when store_lookup set to 1, must set store_group to the group name</p>
<h3 id="（6）（重要）-store-server-x3D-0"><a href="#（6）（重要）-store-server-x3D-0" class="headerlink" title="（6）（重要） store_server&#x3D;0"></a><strong>（6）（重要） store_server&#x3D;0</strong></h3><p>​    # 应用场景： 存在多个相同的组，例如group1 ， 在多个storage 服务器上 例如：192.168.0.171 、，</p>
<p>​              当上传文件时优先选择那个storage的策略配置<strong>：~ 0：轮询 ；1：按ip升序排序后选择第一个ip，即最小的那个ip (192.168.0.164)；2：按优先级排列的第一个服务器顺序，数字越小优先级越 高，storage服务器的优先在storage.conf中配置 upload_priority 参数</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20190325165901337.png" alt="img"></p>
<p>  # <strong>which storage server to upload file</strong></p>
<p>​    # 0: round robin (default)</p>
<p>​    # 1: the first server order by ip address</p>
<p>​    # 2: the first server order by priority (the minimal)</p>
<h3 id="（7）（重要）-store-path-x3D-0"><a href="#（7）（重要）-store-path-x3D-0" class="headerlink" title="（7）（重要） store_path&#x3D;0"></a><strong>（7）（重要） store_path&#x3D;0</strong></h3><p>​    # 应用场景：选择具体一个组的那一条存储路径（<strong>一个group有多条存储路径，一般一个服务器有两块大硬盘挂载到了两个路径下，专门用来存放文件</strong>），~0：轮询，2：负载均衡，选择剩余空间最大的路径 </p>
<p>​     （<strong>逻辑~重要</strong>） 通过上面的配置参数确定了3件事的基础上，该配置才会起作用：</p>
<p>​    （1）确定了要存储在那个group上，例如group1；（2）确定上传文件要保存在那一台storage 中的group1，假如是192.168.0.171；（3） 此时如果 192.168.0.171 上的storage server中group1 有两个存储路径，即store_path0,store_path1**,(对应的文件路径即M00,M01)**</p>
<p><img src="https://img-blog.csdnimg.cn/20190325165922761.png" alt="img"></p>
<p> # which path(means disk or mount point) of the storage server to upload file</p>
<p>​    # 0: round robin</p>
<p>   # 2: load balance, select the max free space path to upload file</p>
<h3 id="（8）download-server-x3D-0"><a href="#（8）download-server-x3D-0" class="headerlink" title="（8）download_server&#x3D;0"></a><strong>（8）download_server&#x3D;0</strong></h3><p>​    # 下载文件时存储服务器的选择策略； 应用场景：要下载的文件所在group 存在多个storage 服务器上， ~0：轮询 ；1：当前文件上载到的源存储服务器</p>
<p>​    # which storage server to download file</p>
<p>​    # 0: round robin (default)</p>
<p>​    # 1: the source storage server which the current file uploaded to</p>
<h3 id="（9）reserved-storage-space-x3D-10"><a href="#（9）reserved-storage-space-x3D-10" class="headerlink" title="（9）reserved_storage_space &#x3D; 10%"></a><strong>（9）reserved_storage_space &#x3D; 10%</strong></h3><p>  # 给系统或其他应用程序预留存储空间设置 </p>
<p>  #（<strong>重要</strong>）场景：某一个group所在某一个storage服务器（可能存在多个服务器上）剩余的存储空间小于等于这个阀值时，则文件不能被保存，即使该group的其他storage服务器还有很大的存储空间</p>
<p>  # reserved storage space for system or other applications.</p>
<p>  # if the free(available) space of any stoarge server in</p>
<p>  # a group &lt;&#x3D; reserved_storage_space,</p>
<p>  # no file can be uploaded to this group.</p>
<p>  # bytes unit can be one of follows:</p>
<p>  ### G or g for gigabyte(GB)</p>
<p>  ### M or m for megabyte(MB)</p>
<p>  ### K or k for kilobyte(KB)</p>
<p>  ### no unit for byte(B)</p>
<p>  ### XX.XX% as ratio such as reserved_storage_space &#x3D; 10%</p>
<p><img src="https://img-blog.csdnimg.cn/20190325165954851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1b3lhbm1pbmc=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/2019032517001063.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1b3lhbm1pbmc=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/20190325170031269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1b3lhbm1pbmc=,size_16,color_FFFFFF,t_70" alt="img"></p>
<h2 id="3、storage-存储服务器"><a href="#3、storage-存储服务器" class="headerlink" title="3、storage 存储服务器"></a><strong>3、storage 存储服务器</strong></h2><ul>
<li><p>storage 定期向tracker发送心跳，报告自己的状态，tracker会将同组的 storage server信息返回给storage （该部分逻辑后面再细讲） </p>
</li>
<li><p>tracker不负责具体的文件上传、下载实现，这些都是有storage完成的</p>
</li>
<li><p>storage保存文件和文件的属性</p>
</li>
<li><p>storage server是基于操作系统的文件管理系统进行文件管理的（上面有提到）</p>
</li>
<li><p>group之间文件同步由storage server 和tacker server一起完成的（该部分逻辑后面再细讲） </p>
</li>
<li><p>storage server的状态（7个）</p>
</li>
<li><p>FDFS_STORAGE_STATUS_INIT :初始化，尚未得到同步已有数据的源服务器</p>
</li>
<li><p>FDFS_STORAGE_STATUS_WAIT_SYNC :等待同步，已得到同步已有数据的源服务器</p>
</li>
<li><p>FDFS_STORAGE_STATUS_SYNCING :同步中</p>
</li>
<li><p>FDFS_STORAGE_STATUS_DELETED :已删除，该服务器从本组中摘除（注：本状态的功能尚未实现）</p>
</li>
<li><p>FDFS_STORAGE_STATUS_OFFLINE :离线</p>
</li>
<li><p>FDFS_STORAGE_STATUS_ONLINE :在线，尚不能提供服务</p>
</li>
<li><p>FDFS_STORAGE_STATUS_ACTIVE :在线，可以提供服务</p>
</li>
</ul>
<h3 id="storage-conf-核心参数配置"><a href="#storage-conf-核心参数配置" class="headerlink" title="storage.conf 核心参数配置"></a>storage.conf 核心参数配置</h3><h3 id="（1）port-x3D-23000"><a href="#（1）port-x3D-23000" class="headerlink" title="（1）port&#x3D;23000"></a>（1）port&#x3D;23000</h3><p>   # storage 服务端口</p>
<p>   # the storage server port</p>
<h3 id="（2）base-path-x3D-x2F-usr-x2F-local-x2F-fastdfs-x2F-fdfs-storage"><a href="#（2）base-path-x3D-x2F-usr-x2F-local-x2F-fastdfs-x2F-fdfs-storage" class="headerlink" title="（2）base_path&#x3D;&#x2F;usr&#x2F;local&#x2F;fastdfs&#x2F;fdfs_storage"></a>（2）base_path&#x3D;&#x2F;usr&#x2F;local&#x2F;fastdfs&#x2F;fdfs_storage</h3><p>   #存放storage 服务的数据和日志</p>
<p>   # the base path to store data and log files</p>
<h3 id="（3）store-path0-x3D-x2F-usr-x2F-local-x2F-fastdfs-x2F-fdfs-storage"><a href="#（3）store-path0-x3D-x2F-usr-x2F-local-x2F-fastdfs-x2F-fdfs-storage" class="headerlink" title="（3）store_path0&#x3D;&#x2F;usr&#x2F;local&#x2F;fastdfs&#x2F;fdfs_storage"></a><strong>（3）store_path0&#x3D;&#x2F;usr&#x2F;local&#x2F;fastdfs&#x2F;fdfs_storage</strong></h3><p>   # 存储路径配置，可以配置多个，对应的 store_path_count&#x3D;1 参数需要累加</p>
<p>   # store_path#, based 0, if store_path0 not exists, it’s value is base_path</p>
<p>   # the paths must be exist</p>
<p>   #store_path1&#x3D;&#x2F;home&#x2F;yuqing&#x2F;fastdfs2</p>
<h3 id="（4）tracker-server-x3D-192-168-0-171-22122"><a href="#（4）tracker-server-x3D-192-168-0-171-22122" class="headerlink" title="（4）tracker_server&#x3D;192.168.0.171:22122"></a><strong>（4）tracker_server&#x3D;192.168.0.171:22122</strong></h3><p>   #tracker 服务的 ip和端口， ip替换为域名也可以，可以配置多个 </p>
<p>   # tracker_server can ocur more than once, and tracker_server format is</p>
<p>   # “host:port”, host can be hostname or ip address</p>
<h3 id="（5）file-distribute-path-mode-x3D-0"><a href="#（5）file-distribute-path-mode-x3D-0" class="headerlink" title="（5）file_distribute_path_mode&#x3D;0"></a><strong>（5）file_distribute_path_mode&#x3D;0</strong></h3><p>  # 分布式存储文件策略： 当storage下有多个存储路径时，该配置起作用 ~ # 0: 轮询   # 1: 根据文件名hash结果随机存储</p>
<p>  # the mode of the files distributed to the data path</p>
<p>  # 0: round robin(default)</p>
<p>  # 1: random, distributted by hash code </p>
<h3 id="（6）upload-priority-x3D-10-（在tracker-conf-中有提到）"><a href="#（6）upload-priority-x3D-10-（在tracker-conf-中有提到）" class="headerlink" title="（6）upload_priority&#x3D;10 （在tracker.conf 中有提到）"></a>（6）upload_priority&#x3D;10 （在tracker.conf 中有提到）</h3><p># 上传文件事，同组内的storage 服务器优先级设置，且当 tracker.conf 中store_server&#x3D; 2时 起作用，值越小，优先级越高。</p>
<p># the priority as a source server for uploading file.</p>
<p># the lower this value, the higher its uploading priority.</p>
<p># default value is 10</p>
<h2 id="4、group"><a href="#4、group" class="headerlink" title="4、group"></a><strong>4、group</strong></h2><ul>
<li>group 分组是fastdfs应对大流量应用系统中处理高并发、高容灾的经典设计，并且group还起到了应用隔离的功能</li>
<li>一个group可以存在多个storage中（在storage中也可以提到）</li>
<li>根据client端的请求分配到不同的group，文件系统具备直接的负载均衡；</li>
<li>group内有storage服务节点坏掉时，需从其他group内恢复数据</li>
</ul>
<h2 id="5、-fastdfs-nginx-module"><a href="#5、-fastdfs-nginx-module" class="headerlink" title="5、 fastdfs-nginx-module"></a><strong>5、 fastdfs-nginx-module</strong></h2><ul>
<li><p>fastdfs 中storage、tracker 均提供的http服务，可以直接下载文件，但考虑到性能及负载实现难易度的问题，一般都用web服务器来下载文件，例如nginx、apache</p>
</li>
<li><p>fastdfs-nginx-module 就是fastdfs基于ngnix实现文件http传输的组件，以nginx module的方式添加到nginx 程序中</p>
</li>
<li><p>每个storage 均需安装 fastdfs-nginx-module 、Nginx ，当前storage找不到文件时，向<strong>源storage</strong>主机发起redirect重定向或proxy转发代理动作</p>
</li>
<li><p>fastdfs-nginx-module 安装后目录结构如下图</p>
<p>说明及图片 摘自：<a href="https://www.cnblogs.com/littleatp/p/4361318.html">https://www.cnblogs.com/littleatp/p/4361318.html</a></p>
</li>
</ul>
<p>​     (1)ngx_http_fastdfs_module.c  ~ nginx 模块接口实现文件，用于向nginx 接入fastdfs-module核心模块逻辑</p>
<p>​    （2）common.c  ~ fastdfs-module核心模块，实现了初始化、文件下载的主要逻辑</p>
<p>​    （3）config   ~ 编译模块所用的配置，里面定义了一些重要的常量，调用fastdfs基础组件功能，以及扩展配置文件路径、文件下载chunk大小</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">（4）mod_fastdfs.conf  ~扩展配置文件的demo，一般会将该文件拷贝到config指定的目录下 例如：/etc/fdfs</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190325170102450.png" alt="img"></p>
<ul>
<li>初始化： nginx启动时，  fastdfs-nginx-module 要完成初始化如下图 ，我们一般在mod_fastdfs.conf配置参数，如下图</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190325170132699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1b3lhbm1pbmc=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/2019032517015280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1b3lhbm1pbmc=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/20190325170205559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1b3lhbm1pbmc=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><strong>（重要）： fastdfs-nginx-module 初始化的过程要加载mod_fastdfs.conf参数，如果本机器下存在多个storage,且有多个group（group1、group2）,则 mod_fastdfs.conf 配置需做如下变动</strong></p>
<h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><p><strong>（1）组名：group_name&#x3D;group1&#x2F;group2   多个用&#x2F;区分开</strong></p>
<p><strong>（2）设置组个数：group_count &#x3D; 4</strong></p>
<p><strong>（4）设置各group信息：</strong></p>
<p><strong>[group1]</strong></p>
<p><strong>group_name&#x3D;group1</strong></p>
<p><strong>storage_server_port&#x3D;23000</strong></p>
<p><strong>store_path_count&#x3D;1</strong></p>
<p><strong>store_path0&#x3D;&#x2F;usr&#x2F;local&#x2F;fastdfs&#x2F;storage</strong></p>
<p><strong>[group2]</strong></p>
<p><strong>group_name&#x3D;group2</strong></p>
<p><em><strong>*storage_server_port&#x3D;23010*</strong></em></p>
<p><strong>store_path_count&#x3D;1</strong></p>
<p><strong>store_path0&#x3D;&#x2F;usr&#x2F;local&#x2F;fastdfs&#x2F;storage</strong></p>
<h3 id="（重要）通过nginx-从fastdfs下载文件，详细说明可参考https-www-cnblogs-com-littleatp-p-4361318-html"><a href="#（重要）通过nginx-从fastdfs下载文件，详细说明可参考https-www-cnblogs-com-littleatp-p-4361318-html" class="headerlink" title="（重要）通过nginx 从fastdfs下载文件，详细说明可参考https://www.cnblogs.com/littleatp/p/4361318.html"></a><strong>（重要）通过nginx 从fastdfs下载文件，详细说明可参考<a href="https://www.cnblogs.com/littleatp/p/4361318.html">https://www.cnblogs.com/littleatp/p/4361318.html</a></strong></h3><p><img src="https://img-blog.csdnimg.cn/20190325170230230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1b3lhbm1pbmc=,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="6、各组件运行机制总结-重要"><a href="#6、各组件运行机制总结-重要" class="headerlink" title="6、各组件运行机制总结**(重要)**"></a>6、各组件运行机制总结**(重要)**</h3><ul>
<li>​    一个group 对应多个 storage (1:N)</li>
<li>​    一个storage对应一个group  (1:1)</li>
<li>​    一个tracker对应多个storage(1:N)</li>
<li>​    一个storage对应多个tracker(1:N) , tracker 和storage的关系是多对多（N:M）</li>
<li>​    一个storage下有多个存储路径 store_path(1:N)</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190325170336507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1b3lhbm1pbmc=,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="7、部署架构汇总"><a href="#7、部署架构汇总" class="headerlink" title="7、部署架构汇总"></a><strong>7、部署架构汇总</strong></h3><h3 id="1）单体部署-单group-单storage-单tracker"><a href="#1）单体部署-单group-单storage-单tracker" class="headerlink" title="1）单体部署: 单group\单storage\单tracker"></a>1）单体部署: 单group\单storage\单tracker</h3><p><img src="https://img-blog.csdnimg.cn/20190325170402345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1b3lhbm1pbmc=,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="2）单服务器多storage部署-（在实际生产环境中没有意义）"><a href="#2）单服务器多storage部署-（在实际生产环境中没有意义）" class="headerlink" title="2）单服务器多storage部署*（在实际生产环境中没有意义）*"></a><strong>2）单服务器多storage部署*<em>（在实际生产环境中没有意义）*</em></strong></h3><h3 id="多group-多storage-单tracker"><a href="#多group-多storage-单tracker" class="headerlink" title="多group\多storage\单tracker"></a><strong>多group\多storage\单tracker</strong></h3><p><img src="https://img-blog.csdnimg.cn/20190325170430665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1b3lhbm1pbmc=,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="3）多服务器多group且group不互备，单tracker（我们项目本次硬盘扩展部署架构）"><a href="#3）多服务器多group且group不互备，单tracker（我们项目本次硬盘扩展部署架构）" class="headerlink" title="3）多服务器多group且group不互备，单tracker（我们项目本次硬盘扩展部署架构）"></a>3）多服务器多group且group不互备，单tracker<strong>（我们项目本次硬盘扩展部署架构）</strong></h3><p>   由于目前服务器资源紧缺暂不做group互备，后面需要做group互备</p>
<p><img src="https://img-blog.csdnimg.cn/20190325170500305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1b3lhbm1pbmc=,size_16,color_FFFFFF,t_70" alt="img"></p>
<ul>
<li><h3 id="部署步骤及参数配置"><a href="#部署步骤及参数配置" class="headerlink" title="部署步骤及参数配置"></a><strong>部署步骤及参数配置</strong></h3><p>（1）两台服务器分别为192.168.0.171、192.168.0.164， 171服务器担任的功能角色更多一些: 文件下载请求 nginx同一入口（分发到storage1、stroage2）、tracker server  、storage1 - group0（fastdfs-nginx-module）。</p>
<p>164服务器主要负责storage1 -group2 的存储、下载功能，没有tacker server，直接连接171服务器的tracker,需要安装nginx 、 fastdfs-nginx-module</p>
</li>
</ul>
<p>（2) 171、 164 都需要安装 fastdfs 、fastdfs-nginx-module、 nginx 安装步骤 与 知识库文档  <a href="http://192.168.0.109:8090/pages/viewpage.action?pageId=1606067">Centos7 上安装 FastDFS</a> 一致 ，但注意一点164服务器不用启动及配置tracker</p>
<p>（ 3） 171 tracker.conf 配置</p>
<p>   <strong>171 tracker.conf 核心参数配置说明，其他参数见附件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># is this config file disabled</span><br><span class="line"></span><br><span class="line"># false for enabled</span><br><span class="line"></span><br><span class="line"># true for disabled</span><br><span class="line"></span><br><span class="line">disabled=false</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># the tracker server port</span><br><span class="line"></span><br><span class="line">port=22122</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># the base path to store data and log files</span><br><span class="line"></span><br><span class="line">base_path=/data/fastdfs/tracker</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># the method of selecting group to upload files</span><br><span class="line"></span><br><span class="line"># 0: round robin</span><br><span class="line"></span><br><span class="line"># 1: specify group</span><br><span class="line"></span><br><span class="line"># 2: load balance, select the max free space group to upload file</span><br><span class="line"></span><br><span class="line">store_lookup=1</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># which group to upload file</span><br><span class="line"></span><br><span class="line"># when store_lookup set to 1, must set store_group to the group name</span><br><span class="line"></span><br><span class="line">store_group=group2</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># which storage server to upload file</span><br><span class="line"></span><br><span class="line"># 0: round robin (default)</span><br><span class="line"></span><br><span class="line"># 1: the first server order by ip address</span><br><span class="line"></span><br><span class="line"># 2: the first server order by priority (the minimal)</span><br><span class="line"></span><br><span class="line">store_server=0</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># which path(means disk or mount point) of the storage server to upload file</span><br><span class="line"></span><br><span class="line"># 0: round robin</span><br><span class="line"></span><br><span class="line"># 2: load balance, select the max free space path to upload file</span><br><span class="line"></span><br><span class="line">store_path=0</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># which storage server to download file</span><br><span class="line"></span><br><span class="line"># 0: round robin (default)</span><br><span class="line"></span><br><span class="line"># 1: the source storage server which the current file uploaded to</span><br><span class="line"></span><br><span class="line">download_server=0</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># reserved storage space for system or other applications.</span><br><span class="line"></span><br><span class="line"># if the free(available) space of any stoarge server in</span><br><span class="line"></span><br><span class="line"># a group &lt;= reserved_storage_space,</span><br><span class="line"></span><br><span class="line"># no file can be uploaded to this group.</span><br><span class="line"></span><br><span class="line"># bytes unit can be one of follows:</span><br><span class="line"></span><br><span class="line">### G or g for gigabyte(GB)</span><br><span class="line"></span><br><span class="line">### M or m for megabyte(MB)</span><br><span class="line"></span><br><span class="line">### K or k for kilobyte(KB)</span><br><span class="line"></span><br><span class="line">### no unit for byte(B)</span><br><span class="line"></span><br><span class="line">### XX.XX% as ratio such as reserved_storage_space = 10%</span><br><span class="line"></span><br><span class="line">reserved_storage_space = 10%</span><br></pre></td></tr></table></figure>



<h3 id="（4）171-storage-conf-配置"><a href="#（4）171-storage-conf-配置" class="headerlink" title="（4）171 storage.conf 配置"></a>（4）171 storage.conf 配置</h3><p><strong>171 storage 核心参数配置，其他参数见附件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># the name of the group this storage server belongs to</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># comment or remove this item for fetching from tracker server,</span><br><span class="line"></span><br><span class="line"># in this case, use_storage_id must set to true in tracker.conf,</span><br><span class="line"></span><br><span class="line"># and storage_ids.conf must be configed correctly.</span><br><span class="line"></span><br><span class="line">group_name=group0</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># the storage server port</span><br><span class="line"></span><br><span class="line">port=23000</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># the base path to store data and log files</span><br><span class="line"></span><br><span class="line">base_path=/data/fastdfs/storage</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># path(disk or mount point) count, default value is 1</span><br><span class="line"></span><br><span class="line">store_path_count=1</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># store_path#, based 0, if store_path0 not exists, it&#x27;s value is base_path</span><br><span class="line"></span><br><span class="line"># the paths must be exist</span><br><span class="line"></span><br><span class="line">store_path0=/data/fastdfs/storage</span><br><span class="line"></span><br><span class="line">#store_path1=/home/yuqing/fastdfs2</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># tracker_server can ocur more than once, and tracker_server format is</span><br><span class="line"></span><br><span class="line">#  &quot;host:port&quot;, host can be hostname or ip address</span><br><span class="line"></span><br><span class="line">tracker_server=192.168.0.171:22122</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># the priority as a source server for uploading file.</span><br><span class="line"></span><br><span class="line"># the lower this value, the higher its uploading priority.</span><br><span class="line"></span><br><span class="line"># default value is 10</span><br><span class="line"></span><br><span class="line">upload_priority=10</span><br></pre></td></tr></table></figure>

<h3 id="（5）171-fastdfs-nginx-module-配置参数-（mod-fastdfs-conf）"><a href="#（5）171-fastdfs-nginx-module-配置参数-（mod-fastdfs-conf）" class="headerlink" title="（5）171 fastdfs_nginx_module 配置参数 （mod_fastdfs.conf）"></a>（5）171 fastdfs_nginx_module 配置参数 （mod_fastdfs.conf）</h3><p><strong>171 mod_fastdfs.conf 核心参数配置，其他参数见附件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># the base path to store log files</span><br><span class="line"></span><br><span class="line">base_path=/data/fastdfs/storage</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># if load FastDFS parameters from tracker server # since V1.12 # default value is false</span><br><span class="line"></span><br><span class="line">load_fdfs_parameters_from_tracker=true</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># FastDFS tracker_server can ocur more than once, and tracker_server format is</span><br><span class="line"></span><br><span class="line">#  &quot;host:port&quot;, host can be hostname or ip address</span><br><span class="line"></span><br><span class="line"># valid only when load_fdfs_parameters_from_tracker is true</span><br><span class="line"></span><br><span class="line">tracker_server=192.168.0.171:22122</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># the port of the local storage server # the default value is 23000</span><br><span class="line"></span><br><span class="line">storage_server_port=23000</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># the group name of the local storage server group_name=group0</span><br><span class="line"></span><br><span class="line"># if the url / uri including the group name # set to false when uri like /M00/00/00/xxx # set to true when uri like $&#123;group_name&#125;/M00/00/00/xxx, such as group1/M00/xxx # default value is false</span><br><span class="line"></span><br><span class="line">url_have_group_name = true</span><br><span class="line"></span><br><span class="line"># path(disk or mount point) count, default value is 1 # must same as storage.conf store_path_count=1</span><br><span class="line"></span><br><span class="line"># store_path#, based 0, if store_path0 not exists, it&#x27;s value is base_path # the paths must be exist # must same as storage.conf</span><br><span class="line"></span><br><span class="line">store_path0=/data/fastdfs/storage</span><br><span class="line"></span><br><span class="line">#store_path1=/home/yuqing/fastdfs1</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># set the group count # set to none zero to support multi-group</span><br><span class="line"></span><br><span class="line"># set to 0  for single group only</span><br><span class="line"></span><br><span class="line"># groups settings section as [group1], [group2], ..., [groupN]</span><br><span class="line"></span><br><span class="line"># default value is 0 # since v1.14</span><br><span class="line"></span><br><span class="line">group_count = 0</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># group settings for group #1 # since v1.14</span><br><span class="line"></span><br><span class="line"># when support multi-group, uncomment following section</span><br><span class="line"></span><br><span class="line">#[group1] #group_name=group1 #storage_server_port=23000</span><br><span class="line"></span><br><span class="line">#store_path_count=2</span><br><span class="line"></span><br><span class="line">#store_path0=/home/yuqing/fastdfs</span><br><span class="line"></span><br><span class="line">#store_path1=/home/yuqing/fastdfs1</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># group settings for group #2</span><br><span class="line"></span><br><span class="line"># since v1.14</span><br><span class="line"></span><br><span class="line"># when support multi-group, uncomment following section as neccessary</span><br><span class="line"></span><br><span class="line">#[group2] #group_name=group2</span><br><span class="line"></span><br><span class="line">#storage_server_port=23000</span><br><span class="line"></span><br><span class="line">#store_path_count=1</span><br><span class="line"></span><br><span class="line">#store_path0=/home/yuqing/fastdfs</span><br></pre></td></tr></table></figure>

<h3 id="（6）171-nginx-参数配置-nginx-conf"><a href="#（6）171-nginx-参数配置-nginx-conf" class="headerlink" title="（6）171 nginx 参数配置 nginx.conf"></a>（6）171 nginx 参数配置 nginx.conf</h3><p><strong>171 nginx.conf 核心参数配置，详见附件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line"></span><br><span class="line">    worker_connections  1024;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;    </span><br><span class="line"></span><br><span class="line">    include       mime.types;    </span><br><span class="line"></span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;    </span><br><span class="line"></span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">        #keepalive_timeout  0;    </span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">        #gzip  on;</span><br><span class="line"></span><br><span class="line">    # 192.168.0.164 storage group2 </span><br><span class="line"></span><br><span class="line">    upstream fdfs_group2_164 &#123; </span><br><span class="line"></span><br><span class="line">        server 192.168.0.164:8288 weight=1 max_fails=2 fail_timeout=30s; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    server &#123;        </span><br><span class="line"></span><br><span class="line">        listen       8070;        </span><br><span class="line"></span><br><span class="line">        server_name  localhost,192.168.0.171;</span><br><span class="line"></span><br><span class="line">            #charset koi8-r;</span><br><span class="line"></span><br><span class="line">            #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">            location / &#123;            </span><br><span class="line"></span><br><span class="line">            root   html;            </span><br><span class="line"></span><br><span class="line">            max_ranges 1;            </span><br><span class="line"></span><br><span class="line">            index  index.html index.htm;        </span><br><span class="line"></span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        location /group0/M00&#123;            </span><br><span class="line"></span><br><span class="line">            root /data/fastdfs/storage/data;            </span><br><span class="line"></span><br><span class="line">            ngx_fastdfs_module;            </span><br><span class="line"></span><br><span class="line">            if ($request_method = &#x27;OPTIONS&#x27;) &#123;                </span><br><span class="line"></span><br><span class="line">                add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;                </span><br><span class="line"></span><br><span class="line">                add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;Range&#x27;;               </span><br><span class="line"></span><br><span class="line">                add_header &#x27;Content-Type&#x27; &#x27;text/plain charset=UTF-8&#x27;;                </span><br><span class="line"></span><br><span class="line">                add_header &#x27;Content-Length&#x27; 0;                </span><br><span class="line"></span><br><span class="line">                return 204;              &#125;            </span><br><span class="line"></span><br><span class="line">            if ($request_method = &#x27;POST&#x27;) &#123;                </span><br><span class="line"></span><br><span class="line">                add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;                </span><br><span class="line"></span><br><span class="line">                add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;                </span><br><span class="line"></span><br><span class="line">                add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;Range&#x27;;              &#125;            </span><br><span class="line"></span><br><span class="line">            if ($request_method = &#x27;GET&#x27;) &#123;                </span><br><span class="line"></span><br><span class="line">                add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;                </span><br><span class="line"></span><br><span class="line">                add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;                </span><br><span class="line"></span><br><span class="line">                add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;Range&#x27;;                </span><br><span class="line"></span><br><span class="line">                add_header &#x27;Access-Control-Expose-Headers&#x27; &#x27;Accept-Ranges, Content-Encoding, Content-Length, Content-Range&#x27;;              &#125;      </span><br><span class="line"></span><br><span class="line">            if ($arg_attname ~* \.(doc|docx|txt|pdf|zip|rar|txt|jpg|png|gif|bmp)$) &#123;</span><br><span class="line"></span><br><span class="line">                add_header &quot;Content-Disposition&quot; &quot;attachment;filename=$arg_attname&quot;;</span><br><span class="line"></span><br><span class="line">                    &#125;        </span><br><span class="line"></span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        location ~* /group2/(M00|M01) &#123;  </span><br><span class="line"></span><br><span class="line">                proxy_next_upstream http_502 http_504 error timeout invalid_header; </span><br><span class="line"></span><br><span class="line">                proxy_pass http://fdfs_group2_164;</span><br><span class="line"></span><br><span class="line">                expires 30d; </span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">         error_page   500 502 503 504  /50x.html;        </span><br><span class="line"></span><br><span class="line">        location = /50x.html &#123;             root   html;         &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="（7）164-storage参数配置"><a href="#（7）164-storage参数配置" class="headerlink" title="（7）164 storage参数配置"></a>（7）164 storage参数配置</h3><p><strong>164 storage.con 核心参数配置，其他参数见附件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># the name of the group this storage server belongs to # # comment or remove this item for fetching from tracker server, # in this case, use_storage_id must set to true in tracker.conf,</span><br><span class="line"></span><br><span class="line"># and storage_ids.conf must be configed correctly.</span><br><span class="line"></span><br><span class="line">group_name=group2</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># the storage server</span><br><span class="line"></span><br><span class="line"> port port=23000</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># the base path to store data and log files</span><br><span class="line"></span><br><span class="line">base_path=/usr/local/fastdfs/fdfs_storage</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># path(disk or mount point) count, default value is 1 store_path_count=1</span><br><span class="line"></span><br><span class="line"># store_path#, based 0, if store_path0 not exists, it&#x27;s value is base_path # the paths must be exist</span><br><span class="line"></span><br><span class="line">store_path0=/usr/local/fastdfs/fdfs_storage</span><br><span class="line"></span><br><span class="line">#store_path1=/home/yuqing/fastdfs2</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># tracker_server can ocur more than once, and tracker_server format is #  &quot;host:port&quot;, host can be hostname or ip address</span><br><span class="line"></span><br><span class="line">tracker_server=192.168.0.171:22122</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># the priority as a source server for uploading file. # the lower this value, the higher its uploading priority. # default value is 10</span><br><span class="line"></span><br><span class="line">upload_priority=10</span><br></pre></td></tr></table></figure>

<h3 id="（8）-164-fastdfs-nginx-module-参数配置-（mod-fastdfs-conf）"><a href="#（8）-164-fastdfs-nginx-module-参数配置-（mod-fastdfs-conf）" class="headerlink" title="（8） 164 fastdfs_nginx_module 参数配置 （mod_fastdfs.conf）"></a>（8） 164 fastdfs_nginx_module 参数配置 （mod_fastdfs.conf）</h3><p><strong>164 mod_fastdfs.conf 核心参数配置，其他参数见附件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># the base path to store log files</span><br><span class="line"></span><br><span class="line">base_path=/usr/local/fastdfs/</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># if load FastDFS parameters from tracker server # since V1.12 # default value is false</span><br><span class="line"></span><br><span class="line">load_fdfs_parameters_from_tracker=true</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># FastDFS tracker_server can ocur more than once, and tracker_server format is #  &quot;host:port&quot;, host can be hostname or ip address # valid only when load_fdfs_parameters_from_tracker is true tracker_server=192.168.0.171:22122</span><br><span class="line"></span><br><span class="line"># the port of the local storage server # the default value is 23000</span><br><span class="line"></span><br><span class="line">storage_server_port=23000</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># the group name of the local storage server</span><br><span class="line"></span><br><span class="line">group_name=group2</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># if the url / uri including the group name</span><br><span class="line"></span><br><span class="line"># set to false when uri like /M00/00/00/xxx</span><br><span class="line"></span><br><span class="line"># set to true when uri like $&#123;group_name&#125;/M00/00/00/xxx, such as group1/M00/xxx</span><br><span class="line"></span><br><span class="line"># default value is false</span><br><span class="line"></span><br><span class="line">url_have_group_name = true</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># path(disk or mount point) count, default value is 1 # must same as storage.conf</span><br><span class="line"></span><br><span class="line">store_path_count=1</span><br><span class="line"></span><br><span class="line"># store_path#, based 0, if store_path0 not exists, it&#x27;s value is base_path</span><br><span class="line"></span><br><span class="line"># the paths must be exist # must same as storage.conf</span><br><span class="line"></span><br><span class="line">store_path0=/usr/local/fastdfs/fdfs_storage</span><br><span class="line"></span><br><span class="line">#store_path1=/home/yuqing/fastdfs1</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># set the group count # set to none zero to support multi-group</span><br><span class="line"></span><br><span class="line"># set to 0  for single group only</span><br><span class="line"></span><br><span class="line"># groups settings section as [group1], [group2], ..., [groupN]</span><br><span class="line"></span><br><span class="line"># default value is 0 # since v1.14</span><br><span class="line"></span><br><span class="line">group_count = 0</span><br></pre></td></tr></table></figure>

<h3 id="（9）164-nginx参数配置，nginx-conf"><a href="#（9）164-nginx参数配置，nginx-conf" class="headerlink" title="（9）164 nginx参数配置，nginx.conf"></a>（9）164 nginx参数配置，nginx.conf</h3><p><strong>164 nginx.conf 参数配置，详见附件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user  www  www;</span><br><span class="line"></span><br><span class="line">worker_processes  12;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line"></span><br><span class="line">    worker_connections  1024;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    include       mime.types;</span><br><span class="line"></span><br><span class="line">     default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">       client_max_body_size 10m;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">        listen       8288;</span><br><span class="line"></span><br><span class="line">        server_name  192.168.0.164,localhost;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        location /group2/M00/&#123;</span><br><span class="line"></span><br><span class="line">            root /usr/local/fastdfs/fdfs_storage/data;</span><br><span class="line"></span><br><span class="line">             ngx_fastdfs_module;</span><br><span class="line"></span><br><span class="line">        if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line"></span><br><span class="line">                 add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class="line"></span><br><span class="line">                 add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;Range&#x27;;</span><br><span class="line"></span><br><span class="line">                 add_header &#x27;Content-Type&#x27; &#x27;text/plain charset=UTF-8&#x27;;</span><br><span class="line"></span><br><span class="line">                 add_header &#x27;Content-Length&#x27; 0;</span><br><span class="line"></span><br><span class="line">                 return 204;</span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             if ($request_method = &#x27;POST&#x27;) &#123;</span><br><span class="line"></span><br><span class="line">                 add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class="line"></span><br><span class="line">                 add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line"></span><br><span class="line">                 add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;Range&#x27;;</span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             if ($request_method = &#x27;GET&#x27;) &#123;</span><br><span class="line"></span><br><span class="line">                 add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class="line"></span><br><span class="line">                 add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line"></span><br><span class="line">                 add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;Range&#x27;;</span><br><span class="line"></span><br><span class="line">                 add_header &#x27;Access-Control-Expose-Headers&#x27; &#x27;Accept-Ranges, Content-Encoding, Content-Length, Content-Range&#x27;;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                if ($arg_attname ~* \.(doc|docx|txt|pdf|zip|rar|txt|jpg|png|gif|bmp)$) &#123;</span><br><span class="line"></span><br><span class="line">                 add_header &quot;Content-Disposition&quot; &quot;attachment;filename=$arg_attname&quot;;</span><br><span class="line"></span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">         &#125;  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4）真正分布式集群部署：多服务器多group且group间互备，多tracker"><a href="#4）真正分布式集群部署：多服务器多group且group间互备，多tracker" class="headerlink" title="4）真正分布式集群部署：多服务器多group且group间互备，多tracker"></a><strong>4）真正分布式集群部署：多服务器多group且group间互备，多tracker</strong></h3><p><img src="https://img-blog.csdnimg.cn/20190325170807597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1b3lhbm1pbmc=,size_16,color_FFFFFF,t_70" alt="img"></p>
]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro使用</title>
    <url>/2021/07/12/shiro%E4%BD%BF%E7%94%A8-shiro%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h1><h2 id="一、shiro是什么"><a href="#一、shiro是什么" class="headerlink" title="一、shiro是什么?"></a>一、shiro是什么?</h2><p>​	 Shiro是Apache下的一个开源项目。shiro属于轻量级框架，相对于SpringSecurity简单的多，也没有SpringSecurity那么复杂 。</p>
<h2 id="二、主要功能"><a href="#二、主要功能" class="headerlink" title="二、主要功能"></a>二、主要功能</h2><h3 id="shiro主要有三大功能模块："><a href="#shiro主要有三大功能模块：" class="headerlink" title="shiro主要有三大功能模块："></a>shiro主要有三大功能模块：</h3><h6 id="1-Subject：主体，一般指用户。"><a href="#1-Subject：主体，一般指用户。" class="headerlink" title="1. Subject：主体，一般指用户。"></a>1. Subject：主体，一般指用户。</h6><h6 id="2-SecurityManager：安全管理器，管理所有Subject，可以配合内部安全组件。-类似于SpringMVC中的DispatcherServlet"><a href="#2-SecurityManager：安全管理器，管理所有Subject，可以配合内部安全组件。-类似于SpringMVC中的DispatcherServlet" class="headerlink" title="2. SecurityManager：安全管理器，管理所有Subject，可以配合内部安全组件。(类似于SpringMVC中的DispatcherServlet)"></a>2. SecurityManager：安全管理器，管理所有Subject，可以配合内部安全组件。(类似于SpringMVC中的DispatcherServlet)</h6><h6 id="3-Realms：用于进行权限信息的验证，一般需要自己实现。"><a href="#3-Realms：用于进行权限信息的验证，一般需要自己实现。" class="headerlink" title="3. Realms：用于进行权限信息的验证，一般需要自己实现。"></a>3. Realms：用于进行权限信息的验证，一般需要自己实现。</h6><h3 id="细分功能"><a href="#细分功能" class="headerlink" title="细分功能"></a>细分功能</h3><h6 id="1-Authentication：身份认证-x2F-登录-账号密码验证-。"><a href="#1-Authentication：身份认证-x2F-登录-账号密码验证-。" class="headerlink" title="1. Authentication：身份认证&#x2F;登录(账号密码验证)。"></a>1. Authentication：身份认证&#x2F;登录(账号密码验证)。</h6><h6 id="2-Authorization：授权，即角色或者权限验证。"><a href="#2-Authorization：授权，即角色或者权限验证。" class="headerlink" title="2. Authorization：授权，即角色或者权限验证。"></a>2. Authorization：授权，即角色或者权限验证。</h6><h6 id="3-Session-Manager：会话管理，用户登录后的session相关管理。"><a href="#3-Session-Manager：会话管理，用户登录后的session相关管理。" class="headerlink" title="3. Session Manager：会话管理，用户登录后的session相关管理。"></a>3. Session Manager：会话管理，用户登录后的session相关管理。</h6><h6 id="4-Cryptography：加密，密码加密等。"><a href="#4-Cryptography：加密，密码加密等。" class="headerlink" title="4. Cryptography：加密，密码加密等。"></a>4. Cryptography：加密，密码加密等。</h6><h6 id="5-Web-Support：Web支持，集成Web环境。"><a href="#5-Web-Support：Web支持，集成Web环境。" class="headerlink" title="5. Web Support：Web支持，集成Web环境。"></a>5. Web Support：Web支持，集成Web环境。</h6><h6 id="6-Caching：缓存，用户信息、角色、权限等缓存到如redis等缓存中。"><a href="#6-Caching：缓存，用户信息、角色、权限等缓存到如redis等缓存中。" class="headerlink" title="6. Caching：缓存，用户信息、角色、权限等缓存到如redis等缓存中。"></a>6. Caching：缓存，用户信息、角色、权限等缓存到如redis等缓存中。</h6><h6 id="7-Concurrency：多线程并发验证，在一个线程中开启另一个线程，可以把权限自动传播过去。"><a href="#7-Concurrency：多线程并发验证，在一个线程中开启另一个线程，可以把权限自动传播过去。" class="headerlink" title="7. Concurrency：多线程并发验证，在一个线程中开启另一个线程，可以把权限自动传播过去。"></a>7. Concurrency：多线程并发验证，在一个线程中开启另一个线程，可以把权限自动传播过去。</h6><h6 id="8-Testing：测试支持；"><a href="#8-Testing：测试支持；" class="headerlink" title="8. Testing：测试支持；"></a>8. Testing：测试支持；</h6><h6 id="9-Run-As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问。"><a href="#9-Run-As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问。" class="headerlink" title="9. Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问。"></a>9. Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问。</h6><h6 id="10-Remember-Me：记住我，登录后，下次再来的话不用登录了"><a href="#10-Remember-Me：记住我，登录后，下次再来的话不用登录了" class="headerlink" title="10. Remember Me：记住我，登录后，下次再来的话不用登录了"></a>10. Remember Me：记住我，登录后，下次再来的话不用登录了</h6><h3 id="三、具体实现"><a href="#三、具体实现" class="headerlink" title="三、具体实现"></a>三、具体实现</h3><h3 id="1、项目目录"><a href="#1、项目目录" class="headerlink" title="1、项目目录"></a>1、项目目录</h3><p><img src="/2021/07/12/shiro%E4%BD%BF%E7%94%A8-shiro%E4%BD%BF%E7%94%A8/1604471130107-03fd3901e8644ec985962a56e1d4f28d.png" alt="1604471130107.png"></p>
<h3 id="pom-xml依赖文件"><a href="#pom-xml依赖文件" class="headerlink" title="pom.xml依赖文件"></a>pom.xml依赖文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.shiro.version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">spring.shiro.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- shiro --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.shiro.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--页面模板依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Permissions权限实体类"><a href="#Permissions权限实体类" class="headerlink" title="Permissions权限实体类"></a>Permissions权限实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Permissions</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String permissionsName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Role角色实体"><a href="#Role角色实体" class="headerlink" title="Role角色实体"></a>Role角色实体</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 角色对应权限集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Permissions&gt; permissions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="User实体"><a href="#User实体" class="headerlink" title="User实体"></a>User实体</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="业务层，模拟数据库"><a href="#业务层，模拟数据库" class="headerlink" title="业务层，模拟数据库"></a>业务层，模拟数据库</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.example.bean.Permissions;</span><br><span class="line"><span class="keyword">import</span> org.example.bean.Role;</span><br><span class="line"><span class="keyword">import</span> org.example.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.example.service.LoginService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserByName</span><span class="params">(String getMapByName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getMapByName(getMapByName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟数据库查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> User</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> User <span class="title function_">getMapByName</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="type">Permissions</span> <span class="variable">permissions1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permissions</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;query&quot;</span>);</span><br><span class="line">        <span class="type">Permissions</span> <span class="variable">permissions2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permissions</span>(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;add&quot;</span>);</span><br><span class="line">        Set&lt;Permissions&gt; permissionsSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        permissionsSet.add(permissions1);</span><br><span class="line">        permissionsSet.add(permissions2);</span><br><span class="line">        <span class="type">Role</span> <span class="variable">role</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Role</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;admin&quot;</span>, permissionsSet);</span><br><span class="line">        Set&lt;Role&gt; roleSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        roleSet.add(role);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;wsl&quot;</span>, <span class="string">&quot;123456&quot;</span>, roleSet);</span><br><span class="line">        Map&lt;String, User&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        map.put(user.getUserName(), user);</span><br><span class="line"></span><br><span class="line">        Set&lt;Permissions&gt; permissionsSet1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        permissionsSet1.add(permissions1);</span><br><span class="line">        <span class="type">Role</span> <span class="variable">role1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Role</span>(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;user&quot;</span>, permissionsSet1);</span><br><span class="line">        Set&lt;Role&gt; roleSet1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        roleSet1.add(role1);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123456&quot;</span>, roleSet1);</span><br><span class="line">        map.put(user1.getUserName(), user1);</span><br><span class="line">        <span class="keyword">return</span> map.get(userName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="CustomRealm用户权限配置类"><a href="#CustomRealm用户权限配置类" class="headerlink" title="CustomRealm用户权限配置类"></a>CustomRealm用户权限配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.example.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.example.service.LoginService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限控制以及权限认证</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限配置类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="comment">//获取当前登录用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> principalCollection.getPrimaryPrincipal().toString();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> loginService.getUserByName(userName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加角色和权限</span></span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">simpleAuthorizationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        user.getRoles().forEach(role -&gt; &#123;</span><br><span class="line">            simpleAuthorizationInfo.addRole(role.getRoleName());</span><br><span class="line">            role.getPermissions().forEach(permission -&gt; simpleAuthorizationInfo.addStringPermission(permission.getPermissionsName()));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限认证类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">username</span> <span class="operator">=</span> authenticationToken.getPrincipal();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(username)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取用户信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> username.toString();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> loginService.getUserByName(name);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//这里返回后会报出对应异常</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//这里验证authenticationToken和simpleAuthenticationInfo的信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(name, user.getPassword(), getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="shiro配置类"><a href="#shiro配置类" class="headerlink" title="shiro配置类"></a>shiro配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.example.shiro.CustomRealm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * shiro具体配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title function_">defaultAdvisorAutoProxyCreator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultAdvisorAutoProxyCreator</span> <span class="variable">defaultAAP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAdvisorAutoProxyCreator</span>();</span><br><span class="line">        defaultAAP.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> defaultAAP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将自己的验证方式加入容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CustomRealm <span class="title function_">myShiroRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限管理，配置主要是Realm的管理认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityManager <span class="title function_">securityManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        securityManager.setRealm(myShiroRealm());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Filter工厂，设置对应的过滤条件和跳转条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//登出</span></span><br><span class="line">        map.put(<span class="string">&quot;/logout&quot;</span>, <span class="string">&quot;logout&quot;</span>);</span><br><span class="line">        <span class="comment">//对所有用户认证</span></span><br><span class="line">        map.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        <span class="comment">//登录</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">        <span class="comment">//首页</span></span><br><span class="line">        shiroFilterFactoryBean.setSuccessUrl(<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">        <span class="comment">//错误页面，认证不通过跳转</span></span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/error&quot;</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title function_">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">AuthorizationAttributeSourceAdvisor</span> <span class="variable">authorizationAttributeSourceAdvisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationAttributeSourceAdvisor</span>();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="ExceptionHandler统一异常处理类"><a href="#ExceptionHandler统一异常处理类" class="headerlink" title="ExceptionHandler统一异常处理类"></a>ExceptionHandler统一异常处理类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">ErrorHandler</span><span class="params">(AuthorizationException e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;没有通过权限验证！&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;没有通过权限验证！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.annotation.RequiresPermissions;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.annotation.RequiresRoles;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.example.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(user.getUserName()) || StringUtils.isEmpty(user.getPassword())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;请输入用户名和密码！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用户认证信息</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">usernamePasswordToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(</span><br><span class="line">                user.getUserName(),</span><br><span class="line">                user.getPassword()</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//进行验证，这里可以捕获异常，然后返回对应信息</span></span><br><span class="line">            subject.login(usernamePasswordToken);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;用户名不存在！&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;用户名不存在！&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;账号或密码错误！&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;账号或密码错误！&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthorizationException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;没有权限！&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;没有权限&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresRoles(&quot;admin&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/admin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">admin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;admin success!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;query&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index success!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;add&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;add success!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>权限</category>
      </categories>
      <tags>
        <tag>权限</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+mybatis_plus实现读写分离</title>
    <url>/2021/10/10/springboot+mybatis_plus%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB-springbootmybatisplus%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
    <content><![CDATA[<h3 id="1、引言"><a href="#1、引言" class="headerlink" title="1、引言"></a>1、引言</h3><p>读写分离要做的事情就是对于一条SQL该选择哪个数据库去执行，至于谁来做选择数据库这件事儿，无非两个，要么中间件帮我们做，要么程序自己做。</p>
<p>因此，一般来讲，读写分离有两种实现方式。第一种是依靠中间件（比如：MyCat），也就是说应用程序连接到中间件，中间件帮我们做SQL分离；第二种是应用程序自己去做分离。这里我们选择程序自己来做，主要是利用Spring提供的路由数据源，以及AOP</p>
<p>然而，应用程序层面去做读写分离最大的弱点（不足之处）在于无法动态增加数据库节点，因为数据源配置都是写在配置中的，新增数据库意味着新加一个数据源，必然改配置，并重启应用。当然，好处就是相对简单。</p>
<h4 id="1-1项目地址"><a href="#1-1项目地址" class="headerlink" title="1.1项目地址"></a>1.1项目地址</h4><p><strong>git-hub</strong>:<a href="https://github.com/wenlinshan/wenlinshan/tree/main/master-slave-demo">https://github.com/wenlinshan/wenlinshan/tree/main/master-slave-demo</a></p>
<h3 id="2、AbstractRoutingDataSource"><a href="#2、AbstractRoutingDataSource" class="headerlink" title="2、AbstractRoutingDataSource"></a>2、AbstractRoutingDataSource</h3><p>基于特定的查找key路由到特定的数据源。它内部维护了一组目标数据源，并且做了路由key与目标数据源之间的映射，提供基于key查找数据源的方法。</p>
<h3 id="3、实践"><a href="#3、实践" class="headerlink" title="3、实践"></a>3、实践</h3><h4 id="3-1-maven依赖"><a href="#3-1-maven依赖" class="headerlink" title="3.1. maven依赖"></a>3.1. maven依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wenlinshan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>master-slave-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>master-slave-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>master-slave-demo<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- druid --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-2-数据源配置"><a href="#3-2-数据源配置" class="headerlink" title="3.2. 数据源配置"></a>3.2. 数据源配置</h4><p><strong>application.yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#配置数据源，根据不同库模拟主从库</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/m1?characterEncoding=utf8&amp;verifyServerCertificate=false&amp;useSSL=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">        <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">slave1:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/s1?characterEncoding=utf8&amp;verifyServerCertificate=false&amp;useSSL=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">        <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">slave2:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">wen</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/s2?characterEncoding=utf8&amp;verifyServerCertificate=false&amp;useSSL=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">        <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment"># 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment"># 如果是放在resource目录 classpath:/mapper/*Mapper.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment">#实体扫描，多个package用逗号或者分号分隔</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.seawatebt.ssm.entity</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#配置返回数据库(column下划线命名&amp;&amp;返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cache-enabled:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#配置JdbcTypeForNull, oracle数据库必须配置</span></span><br><span class="line">    <span class="attr">jdbc-type-for-null:</span> <span class="string">&#x27;null&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-设置路由key-x2F-查找数据源"><a href="#3-3-设置路由key-x2F-查找数据源" class="headerlink" title="3.3. 设置路由key &#x2F; 查找数据源"></a>3.3. 设置路由key &#x2F; 查找数据源</h4><p>目标数据源就是那前3个这个我们是知道的，但是使用的时候是如果查找数据源的呢？</p>
<p>首先，我们定义一个枚举来代表这三个数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 数据库类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">DBTypeEnum</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MASTER,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SLAVE1,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SLAVE2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>新建DataSourceContextHolder</strong></p>
<p>接下来，通过ThreadLocal将数据源设置到每个线程上下文中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wenlinshan.masterslavedemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wenlinshan.masterslavedemo.constant.DBTypeEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过ThreadLocal将数据源设置到每个线程上下文</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wls</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceContextHolder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DBTypeEnum&gt; CONTEXT_HOLDER = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">COUNTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(DBTypeEnum dbType)</span> &#123;</span><br><span class="line">        CONTEXT_HOLDER.set(dbType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DBTypeEnum <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CONTEXT_HOLDER.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>&#123;</span><br><span class="line">        CONTEXT_HOLDER.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">master</span><span class="params">()</span> &#123;</span><br><span class="line">        set(DBTypeEnum.MASTER);</span><br><span class="line">        System.out.println(<span class="string">&quot;切换到master&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">slave</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//  轮询</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> COUNTER.getAndIncrement() % <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (COUNTER.get() &gt; <span class="number">9999</span>) &#123;</span><br><span class="line">            COUNTER.set(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            set(DBTypeEnum.SLAVE1);</span><br><span class="line">            System.out.println(<span class="string">&quot;切换到slave1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set(DBTypeEnum.SLAVE2);</span><br><span class="line">            System.out.println(<span class="string">&quot;切换到slave2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置路由key</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声明路由数据源key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wls</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRoutingDataSource</span> <span class="keyword">extends</span> <span class="title class_">AbstractRoutingDataSource</span> &#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">determineCurrentLookupKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceContextHolder.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>多数据源配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wenlinshan.masterslavedemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> com.wenlinshan.masterslavedemo.constant.DBTypeEnum;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关于数据源配置，参考SpringBoot官方文档第79章《Data Access》</span></span><br><span class="line"><span class="comment"> * 79. Data Access</span></span><br><span class="line"><span class="comment"> * 79.1 Configure a Custom DataSource</span></span><br><span class="line"><span class="comment"> * 79.2 Configure Two DataSources</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wls</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置主数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;master&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.druid.master&quot; )</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">masterDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置从数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;slave1&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.druid.slave1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">slave1DataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置从数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;slave2&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.druid.slave2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">slave2DataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置路由数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> masterDataSource 主节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> slave1DataSource 从节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> slave2DataSource 从节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">myRoutingDataSource</span><span class="params">(<span class="meta">@Qualifier(&quot;master&quot;)</span> DataSource masterDataSource,</span></span><br><span class="line"><span class="params">                                          <span class="meta">@Qualifier(&quot;slave1&quot;)</span> DataSource slave1DataSource,</span></span><br><span class="line"><span class="params">                                          <span class="meta">@Qualifier(&quot;slave2&quot;)</span> DataSource slave2DataSource)</span> &#123;</span><br><span class="line">        Map&lt;Object, Object&gt; targetDataSources = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        targetDataSources.put(DBTypeEnum.MASTER, masterDataSource);</span><br><span class="line">        targetDataSources.put(DBTypeEnum.SLAVE1, slave1DataSource);</span><br><span class="line">        targetDataSources.put(DBTypeEnum.SLAVE2, slave2DataSource);</span><br><span class="line">        <span class="type">MyRoutingDataSource</span> <span class="variable">myRoutingDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRoutingDataSource</span>();</span><br><span class="line">        <span class="comment">//设置默认数据源</span></span><br><span class="line">        myRoutingDataSource.setDefaultTargetDataSource(masterDataSource);</span><br><span class="line">        myRoutingDataSource.setTargetDataSources(targetDataSources);</span><br><span class="line">        <span class="keyword">return</span> myRoutingDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，我们配置了4个数据源，1个master，2两个slave，1个路由数据源。前3个数据源都是为了生成第4个数据源，而且后续我们只用这最后一个路由数据源。</p>
<p><strong>MyBatis配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wenlinshan.masterslavedemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.MybatisConfiguration;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.omg.PortableInterceptor.Interceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mybatis 配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wls</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;myRoutingDataSource&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DataSource myRoutingDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;sqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">MybatisSqlSessionFactoryBean</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisSqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactory.setDataSource(myRoutingDataSource);</span><br><span class="line">        <span class="type">MybatisConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisConfiguration</span>();</span><br><span class="line">        configuration.setJdbcTypeForNull(JdbcType.NULL);</span><br><span class="line">        configuration.setMapUnderscoreToCamelCase(<span class="literal">true</span>);</span><br><span class="line">        configuration.setCacheEnabled(<span class="literal">false</span>);</span><br><span class="line">        sqlSessionFactory.setConfiguration(configuration);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">platformTransactionManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(myRoutingDataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于Spring容器中现在有4个数据源，所以我们需要为事务管理器和MyBatis手动指定一个明确的数据源。</p>
<h4 id="3-4-使用aop实现数据源切换"><a href="#3-4-使用aop实现数据源切换" class="headerlink" title="3.4 使用aop实现数据源切换"></a>3.4 使用aop实现数据源切换</h4><p>默认情况下，所有的查询都走从库，插入&#x2F;修改&#x2F;删除走主库。我们通过方法名来区分操作类型（CRUD）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wenlinshan.masterslavedemo.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wenlinshan.masterslavedemo.config.DataSourceContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置切面 执行具体方法选择的数据源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wls</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceAop</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要读的方法,切面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;!@annotation(com.wenlinshan.masterslavedemo.annotation.Master)&quot; +</span></span><br><span class="line"><span class="meta">            &quot;&amp;&amp; (execution(* com.wenlinshan.masterslavedemo.service..*.select*(..)) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;|| execution(* com.wenlinshan.masterslavedemo.service..*.get*(..)))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readPointcut</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写切面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.wenlinshan.masterslavedemo.annotation.Master) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;|| execution(* com.wenlinshan.masterslavedemo.service..*.insert*(..))&quot; +</span></span><br><span class="line"><span class="meta">            &quot;|| execution(* com.wenlinshan.masterslavedemo.service..*.save*(..))&quot; +</span></span><br><span class="line"><span class="meta">            &quot;|| execution(* com.wenlinshan.masterslavedemo.service..*.add*(..))&quot; +</span></span><br><span class="line"><span class="meta">            &quot;|| execution(* com.wenlinshan.masterslavedemo.service..*.update*(..))&quot; +</span></span><br><span class="line"><span class="meta">            &quot;|| execution(* com.wenlinshan.masterslavedemo.service..*.edit*(..))&quot; +</span></span><br><span class="line"><span class="meta">            &quot;|| execution(* com.wenlinshan.masterslavedemo.service..*.delete*(..))&quot; +</span></span><br><span class="line"><span class="meta">            &quot;|| execution(* com.wenlinshan.masterslavedemo.service..*.remove*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writePointcut</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;readPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        DataSourceContextHolder.slave();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;writePointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> &#123;</span><br><span class="line">        DataSourceContextHolder.master();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;readPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readAfter</span><span class="params">()</span> &#123;</span><br><span class="line">        DataSourceContextHolder.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;writePointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeAfter</span><span class="params">()</span> &#123;</span><br><span class="line">        DataSourceContextHolder.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>有一般情况就有特殊情况，特殊情况是某些情况下我们需要强制读主库，针对这种情况，我们定义一个主键，用该注解标注的就读主库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wenlinshan.masterslavedemo.annotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wls</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Master &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Goods表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wenlinshan.masterslavedemo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;`name`&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;quantity&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer quantity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;price&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COL_ID</span> <span class="operator">=</span> <span class="string">&quot;id&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COL_NAME</span> <span class="operator">=</span> <span class="string">&quot;name&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COL_QUANTITY</span> <span class="operator">=</span> <span class="string">&quot;quantity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COL_PRICE</span> <span class="operator">=</span> <span class="string">&quot;price&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h3><p><strong>service</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wenlinshan.masterslavedemo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wenlinshan.masterslavedemo.annotation.Master;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.wenlinshan.masterslavedemo.domain.Goods;</span><br><span class="line"><span class="keyword">import</span> com.wenlinshan.masterslavedemo.mapper.GoodsMapper;</span><br><span class="line"><span class="keyword">import</span> com.wenlinshan.masterslavedemo.service.GoodsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wls</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;GoodsMapper, Goods&gt; <span class="keyword">implements</span> <span class="title class_">GoodsService</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goods 商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">saveGoods</span><span class="params">(Goods goods)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.save(goods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteGoods</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 全部</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Goods&gt; <span class="title function_">getGoodsAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询单个</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Master</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Goods <span class="title function_">getGoodsById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wenlinshan.masterslavedemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wenlinshan.masterslavedemo.annotation.Master;</span><br><span class="line"><span class="keyword">import</span> com.wenlinshan.masterslavedemo.domain.Goods;</span><br><span class="line"><span class="keyword">import</span> com.wenlinshan.masterslavedemo.service.GoodsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.DeleteMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wls</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goods 商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/saveGoods&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">saveGoods</span><span class="params">(Goods goods)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> goodsService.saveGoods(goods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteGoods&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteGoods</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> goodsService.deleteGoods(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 全部</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getGoodsAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Goods&gt; <span class="title function_">getGoodsAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> goodsService.getGoodsAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询单个</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;getGoodsById&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Goods <span class="title function_">getGoodsById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> goodsService.getGoodsById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
  </entry>
  <entry>
    <title>springboot 优雅的实现统一返回处理</title>
    <url>/2021/08/17/springboot%20%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E5%A4%84%E7%90%86-springbootyou-ya-de-shi-xian-tong-yi-fan-hui-chu-li/</url>
    <content><![CDATA[<h1 id="springboot-优雅的实现统一返回处理"><a href="#springboot-优雅的实现统一返回处理" class="headerlink" title="springboot 优雅的实现统一返回处理"></a>springboot 优雅的实现统一返回处理</h1><p>前言：随着前后端分离这种模式的趋势下，后端开发人员更注重后端方面的代码，但是对后端人员在代码编写的过程当中需要越来越规范，这样不仅可以提高开发效率，更可以让代码后期维护起来更加的方便。</p>
<p>这篇文章主要是当接口返回的统一处理，能够让前端人员有个统一的接收后台的接口返回。</p>
<h2 id="1、自定义常用的状态码"><a href="#1、自定义常用的状态码" class="headerlink" title="1、自定义常用的状态码"></a>1、自定义常用的状态码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义状态码枚举</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wls</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作成功</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    RC200(<span class="number">200</span>, <span class="string">&quot;操作成功&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作失败</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    RC900(<span class="number">900</span>, <span class="string">&quot;操作失败&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务异常</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    RC500(<span class="number">500</span>, <span class="string">&quot;系统异常，请稍后重试&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义状态码</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义描述</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">    ResultCode(<span class="type">int</span> code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然可以定义定义一些其他状态码，可以让前端根据不同的状态码进行不同的处理，这里只定义部分常用状态码。</p>
<h2 id="2、统一结果返回包装类"><a href="#2、统一结果返回包装类" class="headerlink" title="2、统一结果返回包装类"></a>2、统一结果返回包装类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.spring.response.constant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义结果包装类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wls</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultData</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> status;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有结果返回值操作成功</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包装结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        ResultData&lt;T&gt; resultData = <span class="keyword">new</span> <span class="title class_">ResultData</span>&lt;&gt;();</span><br><span class="line">        resultData.setStatus(ResultCode.RC200.getCode());</span><br><span class="line">        resultData.setMessage(ResultCode.RC200.getMessage());</span><br><span class="line">        resultData.setData(data);</span><br><span class="line">        <span class="keyword">return</span> resultData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无结果返回值操作成功</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包装结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData&lt;T&gt; <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        ResultData&lt;T&gt; resultData = <span class="keyword">new</span> <span class="title class_">ResultData</span>&lt;&gt;();</span><br><span class="line">        resultData.setStatus(ResultCode.RC200.getCode());</span><br><span class="line">        resultData.setMessage(ResultCode.RC200.getMessage());</span><br><span class="line">        <span class="keyword">return</span> resultData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有状态码的失败</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code    状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 失败消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;     泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包装失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData&lt;T&gt; <span class="title function_">fail</span><span class="params">(<span class="type">int</span> code, String message)</span> &#123;</span><br><span class="line">        ResultData&lt;T&gt; resultData = <span class="keyword">new</span> <span class="title class_">ResultData</span>&lt;&gt;();</span><br><span class="line">        resultData.setStatus(code);</span><br><span class="line">        resultData.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> resultData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无状态码的失败</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 失败消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;     泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包装失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData&lt;T&gt; <span class="title function_">fail</span><span class="params">( String message)</span> &#123;</span><br><span class="line">        ResultData&lt;T&gt; resultData = <span class="keyword">new</span> <span class="title class_">ResultData</span>&lt;&gt;();</span><br><span class="line">        resultData.setStatus(ResultCode.RC999.getCode());</span><br><span class="line">        resultData.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> resultData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里只封装的部分方法，可以根据自己的实际需求封装不同方法。</p>
<p><strong>写一个简单的请求demo</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getHi&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> ResultData&lt;String&gt; <span class="title function_">getHi</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ResultData.success(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>返回结果</strong></p>
<p><img src="/2021/08/17/springboot%20%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E5%A4%84%E7%90%86-springbootyou-ya-de-shi-xian-tong-yi-fan-hui-chu-li/1.png"></p>
<p><strong>模拟一个服务器的异常</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getHi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;String&gt; <span class="title function_">getHi</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<p><img src="/2021/08/17/springboot%20%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E5%A4%84%E7%90%86-springbootyou-ya-de-shi-xian-tong-yi-fan-hui-chu-li/2.png" alt="2"></p>
<p>这种返回结果肯定不是前端开发人员想处理的，所以我们还要对服务端如果出现一个异常，也需要处理统一的返回格式。</p>
<h2 id="3、自定义异常类，以及全局异常处理"><a href="#3、自定义异常类，以及全局异常处理" class="headerlink" title="3、自定义异常类，以及全局异常处理"></a>3、自定义异常类，以及全局异常处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.spring.response.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.spring.response.constant.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义义务异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wls</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BizException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultCode resultCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BizException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BizException</span><span class="params">(ResultCode resultCode)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(resultCode.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.resultCode = resultCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.spring.response.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.spring.response.constant.ResultCode;</span><br><span class="line"><span class="keyword">import</span> com.example.spring.response.constant.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.example.spring.response.exception.BizException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局统一异常处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wls</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义异常处理。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultData</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BizException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.EXPECTATION_FAILED)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;String&gt; <span class="title function_">exception</span><span class="params">(BizException e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;全局异常信息 e=&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> ResultData.fail(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认全局异常处理。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultData</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;String&gt; <span class="title function_">exception</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;全局异常信息 e=&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> ResultData.fail(ResultCode.RC500.getCode(),e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<p><img src="/2021/08/17/springboot%20%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E5%A4%84%E7%90%86-springbootyou-ya-de-shi-xian-tong-yi-fan-hui-chu-li/3.png" alt="3"></p>
<p>能够正确的返回。</p>
<p>当时回头一想，统一处理但是每次返回结果的时候自己都得重复手动包装一下自定义的类，这样可以用代码来处理，所以下面实现自动包装返回的结果。</p>
<h2 id="4、自定义自动包装统一返回类"><a href="#4、自定义自动包装统一返回类" class="headerlink" title="4、自定义自动包装统一返回类"></a>4、自定义自动包装统一返回类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.spring.response.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.spring.response.constant.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.MethodParameter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一包装返回结果</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wls</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseAdvice</span> <span class="keyword">implements</span> <span class="title class_">ResponseBodyAdvice</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter methodParameter, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> &#123;</span><br><span class="line">        <span class="comment">//返回true则对返回值需要处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口返回前包装结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">beforeBodyWrite</span><span class="params">(Object o, MethodParameter methodParameter, MediaType mediaType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass, ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse)</span> &#123;</span><br><span class="line">        <span class="comment">//如果是String类型，转为json</span></span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> objectMapper.writeValueAsString(ResultData.success(o));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果异常、文件形式，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> ResultData || o <span class="keyword">instanceof</span> Resource ) &#123;</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写个demo测试一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;getWorld&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Order <span class="title function_">getWorld</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">1L</span>,<span class="string">&quot;购物车&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/getError&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Order <span class="title function_">getError</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(<span class="string">&quot;失败了&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<p><img src="/2021/08/17/springboot%20%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E5%A4%84%E7%90%86-springbootyou-ya-de-shi-xian-tong-yi-fan-hui-chu-li/5.png" alt="5"><img src="/2021/08/17/springboot%20%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E5%A4%84%E7%90%86-springbootyou-ya-de-shi-xian-tong-yi-fan-hui-chu-li/6.png" alt="6"></p>
<p>这样就可以优雅的实现统一返回值的处理。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>特别注意这个类的判断！！！</p>
]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+redisson实现分布式锁</title>
    <url>/2021/05/12/springboot+redisson%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-springbootredisson-shi-xian-fen-bu-shi-suo/</url>
    <content><![CDATA[<h2 id="redisson-springboot-实现分布式锁"><a href="#redisson-springboot-实现分布式锁" class="headerlink" title="redisson+springboot 实现分布式锁"></a>redisson+springboot 实现分布式锁</h2><p>在一些场景时，需要保证数据的不重复，以及数据的准确性，特别是特定下，某些数据的准确性显得尤为重要，所以这个时候要保证某个方法同一时刻只能有一个线程执行。在单机情况下可以用jdk的乐观锁进行保证数据的准确性。而在分布式系统中，这种jdk的锁就无法满足这种场景。</p>
<p>所以需要使用redssion实现分布式锁，它不仅可以实现分布式锁，也可以在某些情况下保证不重复提交，保证接口的幂等性。</p>
<p>redisson是基于redis实现的分布式锁，因为redis执行命令操作时是单线程，所以可以保证线程安全。当然还有其他实现分布式锁的方案，例如zk，MongoDB等。</p>
<h4 id="简单来聊一下各自优缺点"><a href="#简单来聊一下各自优缺点" class="headerlink" title="简单来聊一下各自优缺点"></a>简单来聊一下各自优缺点</h4><table>
<thead>
<tr>
<th>方案</th>
<th>实现原理</th>
<th>优点</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>MongoDB</td>
<td>1.加锁：执行findAndModify原子命令查找document，若不存在则新增<br>2.解锁：删除document</td>
<td>实现较为简单</td>
<td>1.大部分公司数据库用MySQL，可能缺乏相应的MongoDB运维、开发人员<br>2.锁无超时自动失效机制</td>
</tr>
<tr>
<td>ZooKeepe</td>
<td>1.加锁：在&#x2F;lock目录下创建临时有序节点，判断创建的节点序号是否最小。若是，则表示获取到锁；否，则则watch &#x2F;lock目录下序号比自身小的前一个节点<br>2.解锁：删除节点</td>
<td>1.由zk保障系统高可用<br>2.Curator框架已原生支持系列分布式锁命令，使用简单</td>
<td>需单独维护一套zk集群，维保成本高</td>
</tr>
<tr>
<td>redis</td>
<td>1. 加锁：执行setnx，若成功再执行expire添加过期时间<br>2. 解锁：执行delete命令</td>
<td>实现简单，相比数据库和分布式系统的实现，该方案最轻，性能最好</td>
<td>1.setnx和expire分2步执行，非原子操作；若setnx执行成功，但expire执行失败，就可能出现死锁<br>2.delete命令存在误删除非当前线程持有的锁的可能<br>3.不支持阻塞等待、不可重入</td>
</tr>
<tr>
<td>redis Lua脚本能力</td>
<td>1. 加锁：执行SET lock_name random_value EX seconds NX 命令 <br>2. 解锁：执行Lua脚本，释放锁时验证random_value – ARGV[1]为random_value, KEYS[1]为lock_name</td>
<td>同上；实现逻辑上也更严谨，除了单点问题，生产环境采用用这种方案，问题也不大。</td>
<td>不支持锁重入，不支持阻塞等待</td>
</tr>
<tr>
<td>redisson</td>
<td>redisson这个框架重度依赖了Lua脚本和Netty，加锁、解锁Lua脚本是redisson分布式锁</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="分布式锁需满足四个条件"><a href="#分布式锁需满足四个条件" class="headerlink" title="分布式锁需满足四个条件"></a>分布式锁需满足四个条件</h4><p>首先，为了确保分布式锁可用，我们至少要确保锁的实现同时满足以下四个条件：</p>
<ol>
<li>互斥性。在任意时刻，只有一个客户端能持有锁。</li>
<li>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li>
<li>解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了，即不能误解锁。</li>
<li>具有容错性。只要大多数Redis节点正常运行，客户端就能够获取和释放锁</li>
</ol>
<h4 id="redisson实现分布式锁案例"><a href="#redisson实现分布式锁案例" class="headerlink" title="redisson实现分布式锁案例"></a>redisson实现分布式锁案例</h4><h5 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;redisson&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;3.12.0&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="2、配置redisson-single-单机"><a href="#2、配置redisson-single-单机" class="headerlink" title="2、配置redisson-single(单机)"></a>2、配置redisson-single(单机)</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#单机</span></span><br><span class="line"><span class="attr">singleServerConfig:</span></span><br><span class="line">  <span class="attr">idleConnectionTimeout:</span> <span class="number">10000</span></span><br><span class="line">  <span class="attr">pingTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">connectTimeout:</span> <span class="number">10000</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="attr">retryAttempts:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">retryInterval:</span> <span class="number">1500</span></span><br><span class="line">  <span class="attr">reconnectionTimeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="attr">failedAttempts:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">subscriptionsPerConnection:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">clientName:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">&quot;redis://localhost:6379&quot;</span></span><br><span class="line">  <span class="attr">subscriptionConnectionMinimumIdleSize:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">subscriptionConnectionPoolSize:</span> <span class="number">50</span></span><br><span class="line">  <span class="attr">connectionMinimumIdleSize:</span> <span class="number">32</span></span><br><span class="line">  <span class="attr">connectionPoolSize:</span> <span class="number">64</span></span><br><span class="line">  <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment">#在最新版本中dns的检查操作会直接报错 所以我直接注释掉了</span></span><br><span class="line">  <span class="comment">#dnsMonitoring: false</span></span><br><span class="line">  <span class="attr">dnsMonitoringInterval:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">threads:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">nettyThreads:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">codec:</span> <span class="type">!&lt;org.redisson.codec.JsonJacksonCodec&gt;</span> &#123;&#125;</span><br><span class="line"><span class="attr">transportMode :</span> <span class="string">&quot;NIO&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="3、配置application"><a href="#3、配置application" class="headerlink" title="3、配置application"></a>3、配置application</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure>

<h5 id="4、编写redisson配置类"><a href="#4、编写redisson配置类" class="headerlink" title="4、编写redisson配置类"></a>4、编写redisson配置类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(destroyMethod=&quot;shutdown&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redisson</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(</span><br><span class="line">                Config.fromYAML(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;redisson-single.yml&quot;</span>).getInputStream()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5、具体业务实现"><a href="#5、具体业务实现" class="headerlink" title="5、具体业务实现"></a>5、具体业务实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;GoodsMapper, Goods&gt; <span class="keyword">implements</span> <span class="title class_">GoodsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_KEY</span> <span class="operator">=</span> <span class="string">&quot;lock&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 库存递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id  id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">killGoods</span><span class="params">(Long id, Integer num)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> LOCK_KEY + id;</span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(key);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//上锁</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="type">Goods</span> <span class="variable">goods</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">            <span class="keyword">if</span> (goods.getQuantity()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;库存数量======&quot;</span>+goods.getQuantity());</span><br><span class="line">            <span class="comment">//将库存减操作</span></span><br><span class="line">            goods.setQuantity(goods.getQuantity()-<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">this</span>.updateById(goods);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//解锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="6、接口实现"><a href="#6、接口实现" class="headerlink" title="6、接口实现"></a>6、接口实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createOrderTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!goodsService.killGoods(<span class="number">1405065181720055809L</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;库存不足&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;创建订单成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7、测试，用ab测试工具"><a href="#7、测试，用ab测试工具" class="headerlink" title="7、测试，用ab测试工具"></a>7、测试，用ab测试工具</h5><p>模拟200个并发测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\develop\Apache24\bin&gt;ab  -n 200 -c 200 &quot;http://localhost:8080/test&quot;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/2021/05/12/springboot+redisson%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-springbootredisson-shi-xian-fen-bu-shi-suo/1623922545310-b997fe37fc3c4af18ecef38b4e142ff8.png" alt="1623922545310.png"></p>
<p><img src="/2021/05/12/springboot+redisson%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-springbootredisson-shi-xian-fen-bu-shi-suo/1623922677743-deda4b67d30e452696770467e442c5f9.png" alt="1623922677743.png"></p>
<p>没有库存变成负数的情况，说明分布式锁已生效</p>
]]></content>
      <categories>
        <category>分布式锁</category>
      </categories>
      <tags>
        <tag>cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>spring事务的传播行为</title>
    <url>/2022/10/25/spring%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA-spring-shi-wu-de-chuan-bo-xing-wei/</url>
    <content><![CDATA[<h2 id="一、多个事务方法相互调用时，事务如何在这些方法间传播"><a href="#一、多个事务方法相互调用时，事务如何在这些方法间传播" class="headerlink" title="一、多个事务方法相互调用时，事务如何在这些方法间传播"></a>一、多个事务方法相互调用时，事务如何在这些方法间传播</h2><p>方法A是一个事务的方法，方法A执行过程中调用了方法B，那么方法B有无事务以及方法B对事务的要求不同都会对方法A的事务具体执行造成影响，同时方法A的事务对方法B的事务执行也有影响，这种影响具体是什么就由两个方法所定义的事务传播类型所决定。</p>
<p><strong>REQUIRED</strong>（Spring默认的事务传播类型）：如果当前没有事务，则自己新建一个事务，如果当前存在事务，则加入这个事务。举例说明:如果方法A所在的方法里面的sql没有事务，那么就会与方法B里面的sql事务放在一起，要么同时成功，要么同时失败。如果方法A所在的方法里面的sql有事务，那么方法B所在的方法里面的sql就会加入方法A的sql的事务，要么同时成功，要么同时失败。</p>
<p><strong>SUPPORTS</strong>:当前存在事务，则加入当前事务，如果当前没有事务，就以非事务方法执行。举例说明:如果方法A所在的方法里面的sql有事务，那么方法B里面的sql则会加入方法A的事务，要么同时成功，要么同时失败。如果方法A所在的方法里面的sql没有事务，那么方法B所在的方法里面的sql就会以非事务运行。</p>
<p><strong>MANDATORY</strong>:当前存在事务，则加入当前事务，如果当前事务不存在，则抛出异常。举例说明:如果方法A所在的方法里面的sql有事务，那么方法B里面的sql则会加入方法A的事务，要么同时成功，要么同时失败。如果方法A所在的方法里面的sql没有事务，那么方法B所在的方法就会抛出异常。</p>
<p><strong>REQUIRES_NEW</strong>:创建一个新事物，如果存在当前事务，则挂起该事务。举例说明:如果方法A所在的方法里面的sql有事务，同时方法B所在的方法里面的sql也有事务，那么先执行方法A里面的事务，再去执行方法B里面的事务。这种情况下，A事务回滚就只是回滚A自己的事务，B亦是如此。</p>
<p><strong>NOT_SUPPORTED</strong>:以非事务方式执行，如果当前存在事务，则挂起当前事务。举例说明:如果方法A所在的方法里面的sql有事务，那么方法A里面的sql单独在事务里执行，方法B里面的sql一定是以非事务运行。如果方法A里面的sql没有事务，那么方法A与方法B里面的sql都是以非事务方式执行。</p>
<p><strong>NEVER</strong>:不使用事务，如果当前事务存在，则抛出异常。</p>
<p><strong>NESTED</strong>:如果当前事务存在，则在嵌套事务中执行，否则REQUIRED的操作一样（开启一个事务）。举例说明:如果方法A所在的sql有事务，那么方法B所在的sql则会嵌套在方法A的事务中执行。</p>
<p><strong>NESTED</strong>和<strong>REQUIRES_NEW</strong>的区别:<strong>REQUIRES_NEW</strong>是新建一个事务并且新开启的这个事务与原事务无关，而<strong>NESTED</strong>则是当前存在事务时（我们把当前事务称之为父事务）会开启一个嵌套事务（称之为一个子事务）。在<strong>NESTED</strong>情况下父事务回滚时，子事务也会回滚，而在<strong>REQUIRES_NEW</strong>的情况下，原有事务回滚，不会影响新开启的事务。</p>
<h2 id="二、关于spring的事务传播特性"><a href="#二、关于spring的事务传播特性" class="headerlink" title="二、关于spring的事务传播特性"></a>二、关于spring的事务传播特性</h2><p>1、why<br>为什么会有事务传播机制？</p>
<p>场景一： serviceA 方法调用了 serviceB 方法，但两个方法都有事务，这个时候如果 serviceB 方法异常，是让 serviceB 方法提交，还是两个一起回滚。场景二：serviceA 方法调用了 serviceB 方法，但是只有 serviceA 方法加了事务，是否把 serviceB 也加入 serviceA 的事务，如果 serviceB 异常，是否回滚 serviceA 。场景三：serviceA 方法调用了 serviceB 方法，两者都有事务，serviceB 已经正常执行完，但 serviceA 异常，是否需要回滚 serviceB 的数据。<br>所以，我们需要有对应的事务传播机制来控制事务。</p>
<p>2、传播机制生效的条件<br>有了spring事务传播机制，那这种机制存在的条件呢？我们知道，spring的事务是基于aop的，确切来说，是基于JDK动态代理的AOP，这种AOP有什么特点呢？ 它是基于类或者接口的，也就是说，当 @Transactional写在一个方法上时，这个方法将会被spring动态代理， 生成一个动态代理类， 对原方法进行修饰增强，但是要注意！！ 原先的方法的类并没有什么不同，并没有事务，spring动态代理这个类生成的代理类才有事务，才有增强，也就是说，在同一个类里面通过this.xx()调用本类的事务方法时，事务是不会生效的，因为你调用的不是代理类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span> </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123; <span class="built_in">this</span>.method2(); &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span> </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123; </span><br><span class="line">xx </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<p>关键在于获取类的代理对象，而不是通过this去调用，所以以下方法都是基于这个关键点去解决的。</p>
<p>1、最简单的，两个事务方法放在不同的service里面，这个比较简单，就不给例子了。（推荐）</p>
<p>2、AOP上下文。spring提供了AOP上下文AopContext，因此通过AopContext，可以很方便的获取到代理对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myservice</span>&#123; </span><br><span class="line"></span><br><span class="line">	<span class="meta">@Transactional</span> </span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123; </span><br><span class="line">		((Myservice)AopContext.currentProxy()).method2(); </span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">	<span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span> </span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123; </span><br><span class="line">		xx </span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一运行，报错了，因为exposeProxy默认为false，我们要暴露代理类，就要设置为true，可以在springboot启动类上加一个注解</p>
<p>@EnableAspectJAutoProxy(exposeProxy &#x3D; true)<br>3、ApplicationContext。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myservice</span>&#123; </span><br><span class="line">	<span class="meta">@Autowired</span> </span><br><span class="line">	ApplicationContext context; </span><br><span class="line"></span><br><span class="line">	Myservice service; </span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostConstruct</span> <span class="comment">//初始化时调用，不加也行 </span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> 	<span class="title function_">getMyservice</span><span class="params">()</span> &#123; </span><br><span class="line">		service = context.getBean(Myservice.class); </span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">	<span class="meta">@Transactional</span> </span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123; </span><br><span class="line">		service.method2(); </span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">	<span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span> </span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123; </span><br><span class="line">		xx </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二和第三种的区别就在于，2是直接获取代理类，3是通过调用getBean间接获取代理类，总的来说，第一种是最方便的，也是最推荐的做法。</p>
<p>3、传播机制类型<br>下面的类型都是针对于被调用方法来说的，理解起来要想象成两个 service 方法的调用才可以。</p>
<p><strong>PROPAGATION_REQUIRED:</strong> (默认) 支持当前事务，如果当前没有事务，则新建事务如果当前存在事务，则加入当前事务，合并成一个事务<br><strong>REQUIRES_NEW:</strong> （一般用在子方法需要单独事务） 新建事务，如果当前存在事务，则把当前事务挂起这个方法会独立提交事务，不受调用者的事务影响，父级异常，它也是正常提交<br>（上面两个类型是常用的，下面的比较少用）</p>
<p><strong>NESTED:</strong>  如果当前存在事务，它将会成为父级事务的一个子事务，方法结束后并没有提交，只有等父事务结束才提交,如果当前没有事务，则新建事务如果它异常，父级可以捕获它的异常而不进行回滚，正常提交,但如果父级异常，它必然回滚，这就是和  <strong>REQUIRES_NEW</strong>  的区别<br><strong>SUPPORTS:</strong>  如果当前存在事务，则加入事务如果当前不存在事务，则以非事务方式运行，这个和不写没区别<br><strong>NOT_SUPPORTED:</strong> 以非事务方式运行如果当前存在事务，则把当前事务挂起<br><strong>MANDATORY:</strong> 如果当前存在事务，则运行在当前事务中如果当前无事务，则抛出异常，也即父级方法必须有事务<br><strong>NEVER:</strong> 以非事务方式运行，如果当前存在事务，则抛出异常，即父级方法必须无事务</p>
]]></content>
  </entry>
  <entry>
    <title>zookeeper自己实现分布式锁</title>
    <url>/2022/08/22/zookeeper%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-zookeeper-zi-ji-shi-xian-fen-bu-shi-suo/</url>
    <content><![CDATA[<pre><code>在一些并发请求的时候，需要保证数据的准确性，在同一时刻只能允许一个请求对同一条数据进行修改操作。在之前的单机应用当中，很容易想到利用jdk的锁来实现，例如 synchronized或者lock 。但是在如今业务复杂的分布式系统中jdk的锁并不适用，所以必须要要用分布式锁。
</code></pre>
<p>常见的几种分布式锁的实现方案，Redis、Mysql 、zookeeper；</p>
<p>本文主要讲的是如何使用zk实现分布式锁：</p>
<pre><code>     ZooKeeper是一个开源的分布式协调服务，他为分布式应用提供了高效且可靠的分布式协调服务，提供了诸如统一命名空间服务，配置服务和分布式锁等分布式基础服务。 

    ZooKeeper的数据模型是内存中的一个ZNode数，由斜杠(/)进行分割的路径，就是一个ZNode，每个ZNode上除了保存自己的数据内容，还保存一系列属性信息。

    ZooKeeper中的数据节点分为两种：持久节点和临时节点。所谓的持久节点是指一旦这个ZNode创建成功，除非主动进行ZNode的移除操作，节点会一直保存在ZooKeeper上；而临时节点的生命周期是跟客户端的（Session）会话相关联的，一旦客户端会话失效，这个会话上的所有临时节点都会被自动移除。
</code></pre>
<p><strong>具体思路：</strong></p>
<p>1、首先zookeeper中我们可以创建一个&#x2F;distributed_lock持久化节点<br>2、然后再在&#x2F;distributed_lock节点下创建自己的临时顺序节点，比如：&#x2F;distributed_lock&#x2F;task_00000000008<br>3、获取所有的&#x2F;distributed_lock下的所有子节点，并排序<br>4、判读自己创建的节点是否最小值（第一位）<br>5、如果是，则获取得到锁，执行自己的业务逻辑，最后删除这个临时节点。<br>6、如果不是最小值，则需要监听自己创建节点前一位节点的数据变化，并阻塞。<br>7、当前一位节点被删除时，我们需要通过递归来判断自己创建的节点是否在是最小的，如果是则执行5）；如果不是则执行6）（就是递归循环的判断）</p>
<h3 id="一、导入依赖"><a href="#一、导入依赖" class="headerlink" title="一、导入依赖"></a>一、导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zk_lock<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>zk_lock<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>zk_lock<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>主要包括了zk客户端的依赖，mybatis-plus的依赖。</p>
<h3 id="二、数据的配置"><a href="#二、数据的配置" class="headerlink" title="二、数据的配置"></a>二、数据的配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据库</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/db3?characterEncoding=utf8&amp;verifyServerCertificate=false&amp;useSSL=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<h3 id="三、具体代码实现"><a href="#三、具体代码实现" class="headerlink" title="三、具体代码实现"></a>三、具体代码实现</h3><p>分布式锁工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.zk_lock.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.IZkDataListener;</span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkConnection;</span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.exception.ZkNodeExistsException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wls</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistributedLockUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONNECTION_STRING</span> <span class="operator">=</span> <span class="string">&quot;localhost:2181&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 父节点</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_NODE</span> <span class="operator">=</span> <span class="string">&quot;/distributed_lock&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CHILDREN_NODE</span> <span class="operator">=</span> <span class="string">&quot;/lock_&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DistributedLockUtil distributedLockUtil;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> ZkClient zkClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建zkClient</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DistributedLockUtil</span><span class="params">()</span> &#123;</span><br><span class="line">        distributedLockUtil = <span class="built_in">this</span>;</span><br><span class="line">        <span class="comment">// 连接到Zookeeper</span></span><br><span class="line">        zkClient = <span class="keyword">new</span> <span class="title class_">ZkClient</span>(<span class="keyword">new</span> <span class="title class_">ZkConnection</span>(CONNECTION_STRING));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建节点</span></span><br><span class="line">        <span class="keyword">if</span> (!zkClient.exists(LOCK_NODE)) &#123;</span><br><span class="line">            zkClient.create(LOCK_NODE, <span class="string">&quot;分布式锁节点&quot;</span>, CreateMode.PERSISTENT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 锁名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.在Zookeeper指定节点下创建临时顺序节点</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">lockName</span> <span class="operator">=</span> zkClient.createEphemeralSequential(LOCK_NODE + CHILDREN_NODE, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">// 尝试获取锁</span></span><br><span class="line">            acquireLock(lockName);</span><br><span class="line">            <span class="keyword">return</span> lockName;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">acquireLock</span><span class="params">(String lockName)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 2.获取lock节点下的所有子节点</span></span><br><span class="line">        List&lt;String&gt; childrenList = zkClient.getChildren(LOCK_NODE);</span><br><span class="line">        <span class="comment">// 3.对子节点进行排序,获取最小值</span></span><br><span class="line">        childrenList.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.parseInt(o1.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]) - Integer.parseInt(o2.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 4.判断当前创建的节点是否在第一位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lockPosition</span> <span class="operator">=</span> childrenList.indexOf(lockName.split(<span class="string">&quot;/&quot;</span>)[lockName.split(<span class="string">&quot;/&quot;</span>).length - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (lockPosition &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 不存在该节点</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ZkNodeExistsException</span>(<span class="string">&quot;不存在的节点：&quot;</span> + lockName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lockPosition == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取到锁</span></span><br><span class="line">            log.info(<span class="string">&quot;获取到锁：&quot;</span> + lockName);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 未获取到锁，阻塞</span></span><br><span class="line">        log.info(<span class="string">&quot;...... 未获取到锁，阻塞等待 。。。。。。&quot;</span>);</span><br><span class="line">        <span class="comment">// 5.如果未获取得到锁,监听当前创建的节点前一位的节点</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">IZkDataListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IZkDataListener</span>() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 当被删除时的监听事件</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> dataPath 节点</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDataDeleted</span><span class="params">(String dataPath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// 6.前一个节点被删除,当不保证轮到自己</span></span><br><span class="line">                log.info(<span class="string">&quot;。。。。。。前一个节点被删除  。。。。。。&quot;</span>);</span><br><span class="line">                acquireLock(lockName);</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDataChange</span><span class="params">(String dataPath, Object data)</span> &#123;</span><br><span class="line">                <span class="comment">//节点被改变</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//监听前一个节点</span></span><br><span class="line">            zkClient.subscribeDataChanges(LOCK_NODE + <span class="string">&quot;/&quot;</span> + childrenList.get(lockPosition - <span class="number">1</span>), listener);</span><br><span class="line">            <span class="comment">//阻塞</span></span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;。。。。。取消订阅。。。。。。&quot;</span>);</span><br><span class="line">            <span class="comment">//取消监听</span></span><br><span class="line">            zkClient.unsubscribeDataChanges(LOCK_NODE + <span class="string">&quot;/&quot;</span> + childrenList.get(lockPosition - <span class="number">1</span>), listener);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁（删除节点）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockName 锁名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">releaseLock</span><span class="params">(String lockName)</span> &#123;</span><br><span class="line">        zkClient.delete(lockName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeZkClient</span><span class="params">()</span> &#123;</span><br><span class="line">        zkClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>具体业务实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 库存递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id  id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">killGoods</span><span class="params">(Long id, Integer num)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">lock</span> <span class="operator">=</span> DistributedLockUtil.getLock();</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(lock)) &#123;</span><br><span class="line">            <span class="type">Goods</span> <span class="variable">goods</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">            <span class="keyword">if</span> (goods.getQuantity() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//库存数量不足,释放锁</span></span><br><span class="line">                DistributedLockUtil.releaseLock(lock);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;库存数量======&quot;</span> + goods.getQuantity());</span><br><span class="line">            <span class="comment">//将库存减操作</span></span><br><span class="line">            goods.setQuantity(goods.getQuantity() - <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">this</span>.updateById(goods);</span><br><span class="line">            DistributedLockUtil.releaseLock(lock);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line"> * <span class="meta">@author</span> wenlinshan</span><br><span class="line"> * <span class="meta">@version</span> <span class="number">1.0</span></span><br><span class="line"> * <span class="meta">@date</span> <span class="number">2021</span>/<span class="number">6</span>/<span class="number">16</span> <span class="number">11</span>:<span class="number">06</span></span><br><span class="line"> * <span class="meta">@desc</span></span><br><span class="line"> */</span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createOrderTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!goodsService.killGoods(<span class="number">1405065181720055809L</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;库存不足&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;创建订单成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;close&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">closeZk</span><span class="params">()</span>&#123;</span><br><span class="line">        DistributedLockUtil.closeZkClient();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;关闭成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此一个简单的分布式锁的demo已经实现。<br>除此之外可以使用现成的框架curator来使用分布式锁。</p>
]]></content>
      <categories>
        <category>分布式锁</category>
      </categories>
  </entry>
  <entry>
    <title>分享一篇文章-神奇的 SQL 之别样的写法</title>
    <url>/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/</url>
    <content><![CDATA[<h1 id="神奇的-SQL-之别样的写法-→-行行比较"><a href="#神奇的-SQL-之别样的写法-→-行行比较" class="headerlink" title="神奇的 SQL 之别样的写法 → 行行比较"></a>神奇的 SQL 之别样的写法 → 行行比较</h1><p>​																							本文链接：cnblogs.com&#x2F;youzhibing&#x2F;p&#x2F;15101096.html</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>　　数据库版本： MySQL 5.7.20-log </p>
<p><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/747662-20210812093924974-1727100840-5f29462b905c4e689c2edaa5e5fd8656.png" alt="747662202108120939249741727100840.png"><br>　　建表 SQL</p>
<p><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/747662-20210812101129712-1532849175-bbdd23d16de14dbcad4767d644ec77dd.png"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `t_ware_sale_statistics`;</span><br><span class="line">CREATE TABLE `t_ware_sale_statistics` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键id&#x27;,</span><br><span class="line">  `business_id` bigint(20) NOT NULL COMMENT &#x27;业务机构编码&#x27;,</span><br><span class="line">  `ware_inside_code` bigint(20) NOT NULL COMMENT &#x27;商品自编码&#x27;,</span><br><span class="line">  `weight_sale_cnt_day` double(16,4) DEFAULT NULL COMMENT &#x27;平均日销量&#x27;,</span><br><span class="line">  `last_thirty_days_sales` double(16,4) DEFAULT NULL COMMENT &#x27;最近30天销量&#x27;,</span><br><span class="line">  `last_sixty_days_sales` double(16,4) DEFAULT NULL COMMENT &#x27;最近60天销量&#x27;,</span><br><span class="line">  `last_ninety_days_sales` double(16,4) DEFAULT NULL COMMENT &#x27;最近90天销量&#x27;,</span><br><span class="line">  `same_period_sale_qty_thirty` double(16,4) DEFAULT NULL COMMENT &#x27;去年同期30天销量&#x27;,</span><br><span class="line">  `same_period_sale_qty_sixty` double(16,4) DEFAULT NULL COMMENT &#x27;去年同期60天销量&#x27;,</span><br><span class="line">  `same_period_sale_qty_ninety` double(16,4) DEFAULT NULL COMMENT &#x27;去年同期90天销量&#x27;,</span><br><span class="line">  `create_user` bigint(20) DEFAULT NULL COMMENT &#x27;创建人&#x27;,</span><br><span class="line">  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `modify_user` bigint(20) DEFAULT NULL COMMENT &#x27;最终修改人&#x27;,</span><br><span class="line">  `modify_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;最终修改时间&#x27;,</span><br><span class="line">  `is_delete` tinyint(2) DEFAULT &#x27;2&#x27; COMMENT &#x27;是否删除，1：是，2：否&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  KEY `idx_business_ware` (`business_id`,`ware_inside_code`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT=&#x27;商品销售统计&#x27;;</span><br></pre></td></tr></table></figure>

<p>　　初始化数据</p>
<p>　　　　准备了 769063 条数据</p>
<p><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/747662-20210812101326865-671080270-b45b9d3614094235ac973bbccbb533ff.png" alt="74766220210812101326865671080270.png"></p>
<h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><p>　　业务机构下销售商品，同个业务机构可以销售不同的商品，同个商品可以在不同的业务机构销售，也就说：业务机构与商品是多对多的关系</p>
<p>　　假设现在有 n 个机构，每个机构下有几个商品，如何查询出这几个门店下各自商品的销售情况？</p>
<p>　　具体点，类似如下</p>
<p><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/image-54d46ffcf96a41b1b031a9bbb6cb048f.png" alt="image.png"></p>
<p>　　如何查出 100001 下商品 1000、1001、1003 、 100002 下商品 1003、1004 、 100003 下商品 1006、1008、1009 的销售情况</p>
<p>　　相当于是双层列表（业务机构列表中套商品列表）的查询；业务机构列表和商品列表都不是固定的，而是动态的</p>
<p>　　那么问题就是：如何查询多个业务机构下，某些商品的销售情况</p>
<p>　　（问题经我一描述，可能更模糊了，大家明白意思了就好！）</p>
<h2 id="循环查询"><a href="#循环查询" class="headerlink" title="循环查询"></a>循环查询</h2><p>　　这个很容易想到，在代码层面循环业务机构列表，每个业务机构查一次数据库，伪代码如下：</p>
<p><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/image-a3ac667739d5455c919bcecd75f15bff.png" alt="image.png"></p>
<p>　　具体的 SQL 类似如下</p>
<p><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/image-074d4491afe3486dac874d8d490430b2.png" alt="image.png"></p>
<p>　　SQL 能走索引</p>
<p><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/image-e5cf8ad05afa4ed5acd18d6e02350666.png" alt="image.png"></p>
<p>　　实现简单，也好理解，SQL 也能走索引，一切看起来似乎很完美</p>
<p>　　然而现实是：部门开发规范约束，不能循环查数据库</p>
<p>　　哦豁，这种方式只能放弃，另寻其他方式了</p>
<h2 id="OR-拼接"><a href="#OR-拼接" class="headerlink" title="OR 拼接"></a>OR 拼接</h2><p>　　通过 MyBatis 的 动态 SQL 功能，进行 SQL 拼接，类似如下</p>
<p><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/image-d29c4ea236a44e6090958ca5b928b5fe.png" alt="image.png"></p>
<p>　　具体的 SQL 类似如下</p>
<p><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/image-0e12a2c6179a4d86b207cae587539247.png" alt="image.png"></p>
<p>　　SQL 也能走索引</p>
<p><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/image-8d7ba0be6aba4adaa40b03c8d0c9de94.png" alt="image.png"></p>
<p>　　实现简单，也好理解，SQL 也能走索引，而且只查询一次数据库，貌似可行</p>
<p>　　唯一可惜的是：有点费 OR，如果业务机构比较多，那 SQL 会比较长</p>
<p>　　作为候选人之一吧，我们接着往下看</p>
<h2 id="混查过滤"><a href="#混查过滤" class="headerlink" title="混查过滤"></a>混查过滤</h2><p>　　同样是利用 Mybatis 的 动态 SQL ，将 business_id 列表拼在一起、 ware_inside_code 拼在一起，类似如下</p>
<p><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/image-bf46b637269849438a7714ea7b551442.png" alt="image.png"></p>
<p>　　具体的 SQL 类似如下</p>
<p><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/image-328446ff1a134354ae9468bfe122402a.png" alt="image.png"></p>
<p>　　SQL 也能走索引<br><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/image-bee2180d1e54452a9f83faa314693d72.png" alt="image.png"></p>
<p>　　实现简单，也好理解，SQL 也能走索引，而且只查询一次数据库，似乎可行</p>
<p>　　但是：查出来的结果集大于等于我们想要的结果集，你品，你细品！</p>
<p>　　所以还需要对查出来的结果集进行一次过滤，过滤出我们想要的结果集</p>
<p>　　姑且也作为候选人之一吧，我们继续往下看</p>
<h2 id="行行比较"><a href="#行行比较" class="headerlink" title="行行比较"></a>行行比较</h2><p>　　SQL-92 中加入了行与行比较的功能，这样一来，比较谓词 &#x3D; 、&lt; 、&gt; 和 IN 谓词的参数就不再只是标量值了，还可以是值列表了</p>
<p>　　当然，还是得用到 Mybatis 的 动态 SQL ，类似如下</p>
<p><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/image-3ed941854ff448a2afca75acfb7201cf.png" alt="image.png"></p>
<p>　　具体的 SQL 类似如下</p>
<p><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/image-e9794c1ebbf44fb3a3034de018e80e98.png" alt="image.png"></p>
<p>　　SQL 同样能走索引</p>
<p><img src="/2021/08/31/%E5%88%86%E4%BA%AB%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-%E7%A5%9E%E5%A5%87%E7%9A%84%20SQL%20%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95-%E7%A5%9E%E5%A5%87%E7%9A%84sql%E4%B9%8B%E5%88%AB%E6%A0%B7%E7%9A%84%E5%86%99%E6%B3%95md/image-793ecb0c293c4bfabef1401a36589a15.png" alt="image.png"></p>
<p>　　实现简单，SQL 也能走索引，而且只查询一次数据库，感觉可行</p>
<p>　　只是：有点不好理解，因为我们平时这么用的少，所以这种写法看起来很陌生</p>
<p>　　另外，行行比较是 SQL 规范，不是某个关系型数据库的规范，也就说关系型数据库都应该支持这种写法</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　1、最后选择了 行行比较 这种方式来实现了需求</p>
<p>　　　　别问我为什么，问就是逼格高！</p>
<p>　　2、某一个需求的实现往往有很多种方式，我们需要结合业务以及各种约束综合考虑，选择最合适的那个</p>
<p>　　3、行行比较是 SQL-92 中引入的，SQL-92 是 1992 年制定的规范</p>
<p>　　　　行行比较不是新特性，而是很早就存在的基础功能</p>
]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
  </entry>
  <entry>
    <title>深入理解Redis</title>
    <url>/2021/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-shen-ru-li-jie-redis/</url>
    <content><![CDATA[<h2 id="一、redis的基本概念"><a href="#一、redis的基本概念" class="headerlink" title="一、redis的基本概念"></a>一、redis的基本概念</h2><p>redis是一个内存数据库</p>
<h3 id="1、NOSQL"><a href="#1、NOSQL" class="headerlink" title="1、NOSQL"></a>1、NOSQL</h3><p>即 Not-Only SQL（ 泛指非关系型的数据库），作为关系型数据库的补充。</p>
<h3 id="2、主要作用"><a href="#2、主要作用" class="headerlink" title="2、主要作用"></a>2、主要作用</h3><p>（1）为热点数据加速查询（主要场景）。如热点商品、热点新闻、热点资讯、推广类等高访问量信息等。</p>
<p>（2）即时信息查询。如各位排行榜、各类网站访问统计、公交到站信息、在线人数信息（聊天室、网站）、设备信号等。</p>
<p>（3）时效性信息控制。如验证码控制、投票控制等。</p>
<p>（4）分布式数据共享。如分布式集群架构中的 session 分离消息队列。</p>
<h2 id="二、redis基本数据类型（value的数据类型）"><a href="#二、redis基本数据类型（value的数据类型）" class="headerlink" title="二、redis基本数据类型（value的数据类型）"></a>二、redis基本数据类型（value的数据类型）</h2><h3 id="1、String"><a href="#1、String" class="headerlink" title="1、String"></a>1、String</h3><p>以key-value的方式进行存储</p>
<p><img src="/2021/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-shen-ru-li-jie-redis/image-5efbb45995f141b9a9c3762d8e0f9b2a.png" alt="image.png"></p>
<h3 id="2、hash"><a href="#2、hash" class="headerlink" title="2、hash"></a>2、hash</h3><p><img src="/2021/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-shen-ru-li-jie-redis/image-4c9f503efbe2476b9e2d56d7b7c105bc.png" alt="image.png"></p>
<h3 id="3、list"><a href="#3、list" class="headerlink" title="3、list"></a>3、list</h3><p><img src="/2021/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-shen-ru-li-jie-redis/image-f7bd516f28f540158964f23626beef7e.png" alt="image.png"></p>
<h3 id="4、set"><a href="#4、set" class="headerlink" title="4、set"></a>4、set</h3><p>set类型：与hash存储结构完全相同，仅存储键，不存储值（nil），并且值是不允许重复的</p>
<p><img src="/2021/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-shen-ru-li-jie-redis/image-026d5d4a5ea64ee7bdc5ef3d3fdaed9b.png" alt="image.png"><br><img src="/2021/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-shen-ru-li-jie-redis/image-122cdbd1b2304d2792c20b26d418f633.png" alt="image.png"></p>
<h3 id="5、zset"><a href="#5、zset" class="headerlink" title="5、zset"></a>5、zset</h3><h2 id="三、Jedis"><a href="#三、Jedis" class="headerlink" title="三、Jedis"></a>三、Jedis</h2><p><img src="/2021/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-shen-ru-li-jie-redis/image-ed7ac2231b2a4fad9073ee67a62d09fe.png" alt="image.png"></p>
<h3 id="1、基于连接池的连接"><a href="#1、基于连接池的连接" class="headerlink" title="1、基于连接池的连接"></a>1、基于连接池的连接</h3><p>JedisPool：Jedis提供的连接池技术 </p>
<p>poolConfig:连接池配置对象 </p>
<p>host:redis服务地址</p>
<p>port:redis服务端口号</p>
<p>创建jedis的配置文件：jedis.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jedis.host=192.168.40.130  </span><br><span class="line">jedis.port=6379  </span><br><span class="line">jedis.maxTotal=50  </span><br><span class="line">jedis.maxIdle=10</span><br></pre></td></tr></table></figure>

<p> 创建JedisUtils，使用静态代码块初始化资源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class JedisUtils &#123;</span><br><span class="line">    private static int maxTotal;</span><br><span class="line">    private static int maxIdel;</span><br><span class="line">    private static String host;</span><br><span class="line">    private static int port;</span><br><span class="line">    private static JedisPoolConfig jpc;</span><br><span class="line">    private static JedisPool jp;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(&quot;redis&quot;);</span><br><span class="line">        maxTotal = Integer.parseInt(bundle.getString(&quot;redis.maxTotal&quot;));</span><br><span class="line">        maxIdel = Integer.parseInt(bundle.getString(&quot;redis.maxIdel&quot;));</span><br><span class="line">        host = bundle.getString(&quot;redis.host&quot;);</span><br><span class="line">        port = Integer.parseInt(bundle.getString(&quot;redis.port&quot;));</span><br><span class="line">        //Jedis连接池配置</span><br><span class="line">        jpc = new JedisPoolConfig();</span><br><span class="line">        jpc.setMaxTotal(maxTotal);</span><br><span class="line">        jpc.setMaxIdle(maxIdel);</span><br><span class="line">        jp = new JedisPool(jpc,host,port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 对外访问接口，提供jedis连接对象，连接从连接池获取，在JedisUtils中添加一个获取jedis的方法：getJedis</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static Jedis getJedis()&#123;</span><br><span class="line">	Jedis jedis = jedisPool.getResource();</span><br><span class="line">	return jedis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、数据删除淘汰策略"><a href="#四、数据删除淘汰策略" class="headerlink" title="四、数据删除淘汰策略"></a>四、数据删除淘汰策略</h2><h3 id="1、定时删除"><a href="#1、定时删除" class="headerlink" title="1、定时删除"></a>1、定时删除</h3><p>创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作</p>
<ul>
<li><p><strong>优点</strong>：节约内存，到时就删除，快速释放掉不必要的内存占用</p>
</li>
<li><p><strong>缺点</strong>：CPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响redis服务器响应时间和指令吞吐量</p>
</li>
<li><p><strong>总结</strong>：用处理器性能换取存储空间（拿时间换空间）</p>
</li>
</ul>
<h3 id="2、惰性删除"><a href="#2、惰性删除" class="headerlink" title="2、惰性删除"></a>2、惰性删除</h3><p>数据到达过期时间，不做处理。等下次访问该数据时，我们需要判断</p>
<ol>
<li>如果未过期，返回数据</li>
<li>发现已过期，删除，返回不存在</li>
</ol>
<ul>
<li><p><strong>优点</strong>：节约CPU性能，发现必须删除的时候才删除</p>
</li>
<li><p><strong>缺点</strong>：内存压力很大，出现长期占用内存的数据</p>
</li>
<li><p><strong>总结</strong>：用存储空间换取处理器性能（拿空间换时间）</p>
</li>
</ul>
<h3 id="3、定期删除"><a href="#3、定期删除" class="headerlink" title="3、定期删除"></a>3、定期删除</h3><ul>
<li><p>Redis启动服务器初始化时，读取配置server.hz的值，默认为10</p>
</li>
<li><p>每秒钟执行server.hz次<strong>serverCron()</strong>——–&gt;<strong>databasesCron()</strong>———&gt;<strong>activeExpireCycle()</strong></p>
</li>
<li><p>**activeExpireCycle()*<em>对每个expires[</em>]逐一进行检测，每次执行耗时：250ms&#x2F;server.hz</p>
</li>
<li><p>对某个expires[*]检测时，随机挑选W个key检测</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果key超时，删除key</span><br><span class="line"></span><br><span class="line">如果一轮中删除的key的数量&gt;W*25%，循环该过程</span><br><span class="line"></span><br><span class="line">如果一轮中删除的key的数量≤W*25%，检查下一个expires[*]，0-15循环</span><br><span class="line"></span><br><span class="line">W取值=ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP属性值</span><br></pre></td></tr></table></figure>

<ul>
<li>参数current_db用于记录<strong>activeExpireCycle()</strong> 进入哪个expires[*] 执行</li>
<li>如果activeExpireCycle()执行时间到期，下次从current_db继续向下执行</li>
</ul>
<p><img src="/2021/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-shen-ru-li-jie-redis/image-eaaeab2df1fa4b34a80b616ccf0e1250.png" alt="image.png"></p>
<p>总的来说：定期删除就是周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度</p>
<ul>
<li><p><strong>特点1</strong>：CPU性能占用设置有峰值，检测频度可自定义设置</p>
</li>
<li><p><strong>特点2</strong>：内存压力不是很大，长期占用内存的冷数据会被持续清理</p>
</li>
<li><p><strong>总结</strong>：周期性抽查存储空间（随机抽查，重点抽查）</p>
</li>
</ul>
<h3 id="4、数据淘汰策略（逐出算法）"><a href="#4、数据淘汰策略（逐出算法）" class="headerlink" title="4、数据淘汰策略（逐出算法）"></a>4、数据淘汰策略（逐出算法）</h3><p>当新数据进入redis时，如果内存不足怎么办？在执行每一个命令前，会调用<strong>freeMemoryIfNeeded()<strong>检测内存是否充足。如果内存不满足新 加入数据的最低存储要求，redis要临时删除一些数据为当前指令清理存储空间。清理数据的策略称为逐出算法。</strong>（3类8种）</strong></p>
<p><strong>第一类</strong>：检测易失数据（可能会过期的数据集server.db[i].expires ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">volatile-lru：挑选最近最少使用的数据淘汰</span><br><span class="line">volatile-lfu：挑选最近使用次数最少的数据淘汰</span><br><span class="line">volatile-ttl：挑选将要过期的数据淘汰</span><br><span class="line">volatile-random：任意选择数据淘汰</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-shen-ru-li-jie-redis/image-9d92b3d0047f4e65b66bdfce123d13bd.png" alt="image.png"></p>
<p><strong>第二类</strong>：检测全库数据（所有数据集server.db[i].dict ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">allkeys-lru：挑选最近最少使用的数据淘汰</span><br><span class="line">allkeLyRs-lfu：：挑选最近使用次数最少的数据淘汰</span><br><span class="line">allkeys-random：任意选择数据淘汰，相当于随机</span><br></pre></td></tr></table></figure>

<p><strong>第三类</strong>：放弃数据驱逐</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">no-enviction（驱逐）：禁止驱逐数据(redis4.0中默认策略)，会引发OOM(Out Of Memory)</span><br></pre></td></tr></table></figure>

<h2 id="五、redis集群"><a href="#五、redis集群" class="headerlink" title="五、redis集群"></a>五、redis集群</h2><h3 id="1、主从复制"><a href="#1、主从复制" class="headerlink" title="1、主从复制"></a>1、主从复制</h3><p>单机的 redis，能够承载的 QPS 大概就在上万到几万不等。对于缓存来说，一般都是用来支撑<strong>读高并发</strong>的。因此架构做成主从(master-slave)架构，一主多从，主负责写，并且将数据复制到其它的 slave 节点，从节点负责读。所有的<strong>读请求全部走从节点</strong>。这样也可以很轻松实现水平扩容，<strong>支撑读高并发</strong>。</p>
<p><img src="/2021/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-shen-ru-li-jie-redis/image-d313f43c4d2f431196ddec6f20e08972.png" alt="image.png"></p>
<h4 id="1）主从复制的作用"><a href="#1）主从复制的作用" class="headerlink" title="1）主从复制的作用"></a>1）主从复制的作用</h4><ul>
<li><p>读写分离：master写、slave读，提高服务器的读写负载能力</p>
</li>
<li><p>负载均衡：基于主从结构，配合读写分离，由slave分担master负载，并根据需求的变化，改变slave的数 量，通过多个从节点分担数据读取负载，大大提高Redis服务器并发量与数据吞吐量</p>
</li>
<li><p>故障恢复：当master出现问题时，由slave提供服务，实现快速的故障恢复</p>
</li>
<li><p>数据冗余：实现数据热备份，是持久化之外的一种数据冗余方式</p>
</li>
<li><p>高可用基石：基于主从复制，构建哨兵模式与集群，实现Redis的高可用方案</p>
</li>
</ul>
<h4 id="2）主从复制工作流程"><a href="#2）主从复制工作流程" class="headerlink" title="2）主从复制工作流程"></a>2）主从复制工作流程</h4><p>主从复制过程大体可以分为3个阶段</p>
<ul>
<li><p>建立连接阶段（即准备阶段）</p>
</li>
<li><p>数据同步阶段</p>
</li>
<li><p>命令传播阶段（反复同步）<br><img src="/2021/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-shen-ru-li-jie-redis/image-0b915a6d7314481b9e5f03c7eb6cf48d.png" alt="image.png"></p>
</li>
</ul>
<h5 id="阶段一：建立连接"><a href="#阶段一：建立连接" class="headerlink" title="阶段一：建立连接"></a>阶段一：建立连接</h5><p>建立slave到master的连接，使master能够识别slave，并保存slave端口号</p>
<p>流程如下：</p>
<ol>
<li><p>步骤1：设置master的地址和端口，保存master信息</p>
</li>
<li><p>步骤2：建立socket连接</p>
</li>
<li><p>步骤3：发送ping命令（定时器任务）</p>
</li>
<li><p>步骤4：身份验证</p>
</li>
<li><p>步骤5：发送slave端口信息</p>
</li>
</ol>
<p>至此，主从连接成功！</p>
<p>当前状态：</p>
<p>slave：保存master的地址与端口</p>
<p>master：保存slave的端口</p>
<p><img src="/2021/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-shen-ru-li-jie-redis/image-5218299629984afeb49550cb754c4dcc.png" alt="image.png"></p>
<h5 id="阶段二：数据同步"><a href="#阶段二：数据同步" class="headerlink" title="阶段二：数据同步"></a>阶段二：数据同步</h5><ul>
<li>在slave初次连接master后，复制master中的所有数据到slave</li>
<li>将slave的数据库状态更新成master当前的数据库状态</li>
</ul>
<p>同步过程如下：</p>
<ol>
<li><p>步骤1：请求同步数据</p>
</li>
<li><p>步骤2：创建RDB同步数据</p>
</li>
<li><p>步骤3：恢复RDB同步数据</p>
</li>
<li><p>步骤4：请求部分同步数据</p>
</li>
<li><p>步骤5：恢复部分同步数据</p>
</li>
</ol>
<p>至此，数据同步工作完成！</p>
<p>当前状态：</p>
<p>slave：具有master端全部数据，包含RDB过程接收的数据</p>
<p>master：保存slave当前数据同步的位置</p>
<p>总体：之间完成了数据克隆</p>
<p><img src="/2021/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-shen-ru-li-jie-redis/image-bcd8b524679c43d2b683535ef58192f4.png" alt="image.png"></p>
<p><strong>数据同步阶段master说明</strong></p>
<p>1：如果master数据量巨大，数据同步阶段应避开流量高峰期，避免造成master阻塞，影响业务正常执行</p>
<p>2：复制缓冲区大小设定不合理，会导致数据溢出。如进行全量复制周期太长，进行部分复制时发现数据已经存在丢失的情况，必须进行第二次全量复制，致使slave陷入死循环状态。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repl-backlog-size ?mb</span><br></pre></td></tr></table></figure>

<ol>
<li>master单机内存占用主机内存的比例不应过大，建议使用50%-70%的内存，留下30%-50%的内存用于执 行bgsave命令和创建复制缓冲区</li>
</ol>
<p><img src="/2021/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis-shen-ru-li-jie-redis/image-f80b80cac8d84ea5a6f1f9c7b5faf1a0.png" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2020/png/2396018/1599985757856-9f821705-f68d-4bf4-a7bb-b4db0ce971ab.png" alt="img"></p>
<p><strong>数据同步阶段slave说明</strong></p>
<ol>
<li>为避免slave进行全量复制、部分复制时服务器响应阻塞或数据不同步，建议关闭此期间的对外服务</li>
</ol>
<p>  slave-serve-stale-data yes|no</p>
<ol>
<li><p>数据同步阶段，master发送给slave信息可以理解master是slave的一个客户端，主动向slave发送命令</p>
</li>
<li><p>多个slave同时对master请求数据同步，master发送的RDB文件增多，会对带宽造成巨大冲击，如果master带宽不足，因此数据同步需要根据业务需求，适量错峰</p>
</li>
<li><p>slave过多时，建议调整拓扑结构，由一主多从结构变为树状结构，中间的节点既是master，也是 slave。注意使用树状结构时，由于层级深度，导致深度越高的slave与最顶层master间数据同步延迟 较大，数据一致性变差，应谨慎选择</p>
</li>
</ol>
<h5 id="2-2-1-3-阶段三：命令传播"><a href="#2-2-1-3-阶段三：命令传播" class="headerlink" title="2.2.1.3 阶段三：命令传播"></a>2.2.1.3 阶段三：命令传播</h5><ul>
<li>当master数据库状态被修改后，导致主从服务器数据库状态不一致，此时需要让主从数据同步到一致的状态，同步的动作称为命令传播</li>
<li>master将接收到的数据变更命令发送给slave，slave接收命令后执行命令</li>
</ul>
<p><strong>命令传播阶段的部分复制</strong></p>
<p>命令传播阶段出现了断网现象：</p>
<p>网络闪断闪连：忽略</p>
<p>短时间网络中断：部分复制</p>
<p>长时间网络中断：全量复制</p>
<p>这里我们主要来看部分复制，部分复制的三个核心要素</p>
<ol>
<li><p>服务器的运行 id（run id）</p>
</li>
<li><p>主服务器的复制积压缓冲区</p>
</li>
<li><p>主从服务器的复制偏移量</p>
</li>
</ol>
<p><strong>服务器运行ID（runid）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">概念：服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行id组成：运行id由40位字符组成，是一个随机的十六进制字符例如：fdc9ff13b9bbaab28db42b3d50f852bb5e3fcdce作用：运行id被用于在服务器间进行传输，识别身份如果想两次操作均对同一台服务器进行，必须每次操作携带对应的运行id，用于对方识别实现方式：运行id在每台服务器启动时自动生成的，master在首次连接slave时，会将自己的运行ID发送给slave，slave保存此ID，通过info Server命令，可以查看节点的runid</span><br></pre></td></tr></table></figure>

<p><strong>复制缓冲区</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">概念：复制缓冲区，又名复制积压缓冲区，是一个先进先出（FIFO）的队列，用于存储服务器执行过的命令，每次传播命令，master都会将传播的命令记录下来，并存储在复制缓冲区	复制缓冲区默认数据存储空间大小是1M	当入队元素的数量大于队列长度时，最先入队的元素会被弹出，而新元素会被放入队列作用：用于保存master收到的所有指令（仅影响数据变更的指令，例如set，select）数据来源：当master接收到主客户端的指令时，除了将指令执行，会将该指令存储到缓冲区中</span><br><span class="line">​```![]()![]()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式——状态模式</title>
    <url>/2021/06/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在一些复杂的业务当中，涉及到某个业务有多个状态，按照传统写法无非就是<code>if else </code>，其实还是有一种比较优雅的实现方式，就是设计模式中的状态机模式。没有spring之前虽然也能实现状态机模式，但是并不优雅。下面来说一个用springboot来实现状态机模式的案例。</p>
<pre><code>  举一个例子，比如订单：订单当中涉及到多个状态的跳转，有的时候还需要对修改状态前的逻辑进行判断，这个时候用状态机模式就是很好的实现。
</code></pre>
<h5 id="1、引入部分依赖"><a href="#1、引入部分依赖" class="headerlink" title="1、引入部分依赖"></a>1、引入部分依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>order_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="主要的包结构"><a href="#主要的包结构" class="headerlink" title="主要的包结构:"></a>主要的包结构:</h5><p><img src="/2021/06/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/Snipaste_2021-06-09_22-35-07-d55e4019a7c149b39de4eaa9e76a5e05.png" alt="Snipaste_20210609_223507.png"></p>
<h5 id="2、订单类："><a href="#2、订单类：" class="headerlink" title="2、订单类："></a>2、订单类：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/9 21:33</span></span><br><span class="line"><span class="comment"> * 订单类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3、创建订单状态处理超类"><a href="#3、创建订单状态处理超类" class="headerlink" title="3、创建订单状态处理超类"></a>3、创建订单状态处理超类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.bll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.pojo.Order;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/9 21:43</span></span><br><span class="line"><span class="comment"> * 订单状态处理超类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderState</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原来状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newOrder 新订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldOrder 老订单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(Order newOrder,Order oldOrder)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4、各个状态处理类"><a href="#4、各个状态处理类" class="headerlink" title="4、各个状态处理类"></a>4、各个状态处理类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.bll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.pojo.Order;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/9 21:46</span></span><br><span class="line"><span class="comment"> * 订单各状态处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderStateCommon</span> <span class="keyword">implements</span> <span class="title class_">OrderState</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(Order newOrder, Order oldOrder)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成日志</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> order 订单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildOrderLog</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="comment">//保存日志</span></span><br><span class="line">        System.out.println(<span class="string">&quot;保存日志订单状态: &quot;</span> + order.getStatus());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.example.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/9 21:52</span></span><br><span class="line"><span class="comment"> * 订单状态: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(OrderStateFactory.ORDER_STATUS + 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderStateFor1</span> <span class="keyword">extends</span> <span class="title class_">OrderStateCommon</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(Order newOrder, Order oldOrder)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(oldOrder))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不做操作&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;订单状态:1 处理逻辑==&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">//保存日志</span></span><br><span class="line">        <span class="built_in">super</span>.buildOrderLog(newOrder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.bll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/9 21:52</span></span><br><span class="line"><span class="comment"> * 订单状态: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(OrderStateFactory.ORDER_STATUS + 2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderStateFor2</span> <span class="keyword">extends</span> <span class="title class_">OrderStateCommon</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(Order newOrder, Order oldOrder)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;订单状态:2 处理逻辑==&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">//保存日志</span></span><br><span class="line">        <span class="built_in">super</span>.buildOrderLog(newOrder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.bll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/9 21:52</span></span><br><span class="line"><span class="comment"> * 订单状态: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(OrderStateFactory.ORDER_STATUS + 3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderStateFor3</span> <span class="keyword">extends</span> <span class="title class_">OrderStateCommon</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(Order newOrder, Order oldOrder)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;订单状态:3 处理逻辑==&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">//保存日志</span></span><br><span class="line">        <span class="built_in">super</span>.buildOrderLog(newOrder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5、工厂类"><a href="#5、工厂类" class="headerlink" title="5、工厂类"></a>5、工厂类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.bll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wenlinshan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/9 21:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderStateFactory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义bean名字前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORDER_STATUS</span> <span class="operator">=</span> <span class="string">&quot;orderStatus&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入到容器里面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Map&lt;String, OrderState&gt; states = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对应状态的执行类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status 状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 具体状态的执行类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> OrderState <span class="title function_">getState</span><span class="params">(Integer status)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (states.containsKey(ORDER_STATUS + status)) &#123;</span><br><span class="line">            <span class="keyword">return</span> states.get(ORDER_STATUS + status);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;未找到执行状态的类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6、主要的入口类代码"><a href="#6、主要的入口类代码" class="headerlink" title="6、主要的入口类代码"></a>6、主要的入口类代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.bll.OrderState;</span><br><span class="line"><span class="keyword">import</span> org.example.bll.OrderStateFactory;</span><br><span class="line"><span class="keyword">import</span> org.example.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> org.example.service.IOrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/9 21:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IOrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderStateFactory factory;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrUpdateOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="comment">//查找出原来的订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">oldOrder</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(order.getId());</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(oldOrder)) &#123;</span><br><span class="line">            <span class="comment">//新增</span></span><br><span class="line">            <span class="built_in">this</span>.save(order);</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(order.getStatus())) &#123;</span><br><span class="line">                <span class="comment">//调用状态机</span></span><br><span class="line">                factory.getState(order.getStatus()).handle(order,<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        <span class="type">OrderState</span> <span class="variable">orderState</span> <span class="operator">=</span> Objects.isNull(order.getStatus()) ? factory.getState(oldOrder.getStatus()) : factory.getState(order.getStatus());</span><br><span class="line">        orderState.handle(order,oldOrder);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>至此，所有的代码都已实现，下面开始演示‘</p>
<h5 id="7、测试类："><a href="#7、测试类：" class="headerlink" title="7、测试类："></a>7、测试类：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> org.example.service.IOrderService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/9 22:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IOrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOrder1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">1L</span>, BigDecimal.ONE, <span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        orderService.saveOrUpdateOrder(order);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="/2021/06/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/Snipaste_2021-06-09_22-44-33-75bd239201e04e57ae2fd7865222739e.png" alt="Snipaste_20210609_224433.png"></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
</search>
